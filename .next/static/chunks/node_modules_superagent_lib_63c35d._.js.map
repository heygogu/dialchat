{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/superagent/lib/utils.js"],"sourcesContent":["\"use strict\";\n\n/**\n * Return the mime type for the given `str`.\n *\n * @param {String} str\n * @return {String}\n * @api private\n */\n\nexports.type = string_ => string_.split(/ *; */).shift();\n\n/**\n * Return header field parameters.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nexports.params = value => {\n  const object = {};\n  for (const string_ of value.split(/ *; */)) {\n    const parts = string_.split(/ *= */);\n    const key = parts.shift();\n    const value = parts.shift();\n    if (key && value) object[key] = value;\n  }\n  return object;\n};\n\n/**\n * Parse Link header fields.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nexports.parseLinks = value => {\n  const object = {};\n  for (const string_ of value.split(/ *, */)) {\n    const parts = string_.split(/ *; */);\n    const url = parts[0].slice(1, -1);\n    const rel = parts[1].split(/ *= */)[1].slice(1, -1);\n    object[rel] = url;\n  }\n  return object;\n};\n\n/**\n * Strip content related fields from `header`.\n *\n * @param {Object} header\n * @return {Object} header\n * @api private\n */\n\nexports.cleanHeader = (header, changesOrigin) => {\n  delete header['content-type'];\n  delete header['content-length'];\n  delete header['transfer-encoding'];\n  delete header.host;\n  // secuirty\n  if (changesOrigin) {\n    delete header.authorization;\n    delete header.cookie;\n  }\n  return header;\n};\n\n/**\n * Check if `obj` is an object.\n *\n * @param {Object} object\n * @return {Boolean}\n * @api private\n */\nexports.isObject = object => {\n  return object !== null && typeof object === 'object';\n};\n\n/**\n * Object.hasOwn fallback/polyfill.\n *\n * @type {(object: object, property: string) => boolean} object\n * @api private\n */\nexports.hasOwn = Object.hasOwn || function (object, property) {\n  if (object == null) {\n    throw new TypeError('Cannot convert undefined or null to object');\n  }\n  return Object.prototype.hasOwnProperty.call(new Object(object), property);\n};\nexports.mixin = (target, source) => {\n  for (const key in source) {\n    if (exports.hasOwn(source, key)) {\n      target[key] = source[key];\n    }\n  }\n};\n\n/**\n * Check if the response is compressed using Gzip or Deflate.\n * @param {Object} res\n * @return {Boolean}\n */\n\nexports.isGzipOrDeflateEncoding = res => {\n  return new RegExp(/^\\s*(?:deflate|gzip)\\s*$/).test(res.headers['content-encoding']);\n};\n\n/**\n * Check if the response is compressed using Brotli.\n * @param {Object} res\n * @return {Boolean}\n */\n\nexports.isBrotliEncoding = res => {\n  return new RegExp(/^\\s*(?:br)\\s*$/).test(res.headers['content-encoding']);\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleHBvcnRzIiwidHlwZSIsInN0cmluZ18iLCJzcGxpdCIsInNoaWZ0IiwicGFyYW1zIiwidmFsdWUiLCJvYmplY3QiLCJwYXJ0cyIsImtleSIsInBhcnNlTGlua3MiLCJ1cmwiLCJzbGljZSIsInJlbCIsImNsZWFuSGVhZGVyIiwiaGVhZGVyIiwiY2hhbmdlc09yaWdpbiIsImhvc3QiLCJhdXRob3JpemF0aW9uIiwiY29va2llIiwiaXNPYmplY3QiLCJoYXNPd24iLCJPYmplY3QiLCJwcm9wZXJ0eSIsIlR5cGVFcnJvciIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIm1peGluIiwidGFyZ2V0Iiwic291cmNlIiwiaXNHemlwT3JEZWZsYXRlRW5jb2RpbmciLCJyZXMiLCJSZWdFeHAiLCJ0ZXN0IiwiaGVhZGVycyIsImlzQnJvdGxpRW5jb2RpbmciXSwic291cmNlcyI6WyIuLi9zcmMvdXRpbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXG4vKipcbiAqIFJldHVybiB0aGUgbWltZSB0eXBlIGZvciB0aGUgZ2l2ZW4gYHN0cmAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZXhwb3J0cy50eXBlID0gKHN0cmluZ18pID0+IHN0cmluZ18uc3BsaXQoLyAqOyAqLykuc2hpZnQoKTtcblxuLyoqXG4gKiBSZXR1cm4gaGVhZGVyIGZpZWxkIHBhcmFtZXRlcnMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7T2JqZWN0fVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZXhwb3J0cy5wYXJhbXMgPSAodmFsdWUpID0+IHtcbiAgY29uc3Qgb2JqZWN0ID0ge307XG4gIGZvciAoY29uc3Qgc3RyaW5nXyBvZiB2YWx1ZS5zcGxpdCgvICo7ICovKSkge1xuICAgIGNvbnN0IHBhcnRzID0gc3RyaW5nXy5zcGxpdCgvICo9ICovKTtcbiAgICBjb25zdCBrZXkgPSBwYXJ0cy5zaGlmdCgpO1xuICAgIGNvbnN0IHZhbHVlID0gcGFydHMuc2hpZnQoKTtcblxuICAgIGlmIChrZXkgJiYgdmFsdWUpIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqZWN0O1xufTtcblxuLyoqXG4gKiBQYXJzZSBMaW5rIGhlYWRlciBmaWVsZHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7T2JqZWN0fVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZXhwb3J0cy5wYXJzZUxpbmtzID0gKHZhbHVlKSA9PiB7XG4gIGNvbnN0IG9iamVjdCA9IHt9O1xuICBmb3IgKGNvbnN0IHN0cmluZ18gb2YgdmFsdWUuc3BsaXQoLyAqLCAqLykpIHtcbiAgICBjb25zdCBwYXJ0cyA9IHN0cmluZ18uc3BsaXQoLyAqOyAqLyk7XG4gICAgY29uc3QgdXJsID0gcGFydHNbMF0uc2xpY2UoMSwgLTEpO1xuICAgIGNvbnN0IHJlbCA9IHBhcnRzWzFdLnNwbGl0KC8gKj0gKi8pWzFdLnNsaWNlKDEsIC0xKTtcbiAgICBvYmplY3RbcmVsXSA9IHVybDtcbiAgfVxuXG4gIHJldHVybiBvYmplY3Q7XG59O1xuXG4vKipcbiAqIFN0cmlwIGNvbnRlbnQgcmVsYXRlZCBmaWVsZHMgZnJvbSBgaGVhZGVyYC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaGVhZGVyXG4gKiBAcmV0dXJuIHtPYmplY3R9IGhlYWRlclxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZXhwb3J0cy5jbGVhbkhlYWRlciA9IChoZWFkZXIsIGNoYW5nZXNPcmlnaW4pID0+IHtcbiAgZGVsZXRlIGhlYWRlclsnY29udGVudC10eXBlJ107XG4gIGRlbGV0ZSBoZWFkZXJbJ2NvbnRlbnQtbGVuZ3RoJ107XG4gIGRlbGV0ZSBoZWFkZXJbJ3RyYW5zZmVyLWVuY29kaW5nJ107XG4gIGRlbGV0ZSBoZWFkZXIuaG9zdDtcbiAgLy8gc2VjdWlydHlcbiAgaWYgKGNoYW5nZXNPcmlnaW4pIHtcbiAgICBkZWxldGUgaGVhZGVyLmF1dGhvcml6YXRpb247XG4gICAgZGVsZXRlIGhlYWRlci5jb29raWU7XG4gIH1cblxuICByZXR1cm4gaGVhZGVyO1xufTtcblxuLyoqXG4gKiBDaGVjayBpZiBgb2JqYCBpcyBhbiBvYmplY3QuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5leHBvcnRzLmlzT2JqZWN0ID0gKG9iamVjdCkgPT4ge1xuICByZXR1cm4gb2JqZWN0ICE9PSBudWxsICYmIHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnO1xufTtcblxuLyoqXG4gKiBPYmplY3QuaGFzT3duIGZhbGxiYWNrL3BvbHlmaWxsLlxuICpcbiAqIEB0eXBlIHsob2JqZWN0OiBvYmplY3QsIHByb3BlcnR5OiBzdHJpbmcpID0+IGJvb2xlYW59IG9iamVjdFxuICogQGFwaSBwcml2YXRlXG4gKi9cbmV4cG9ydHMuaGFzT3duID1cbiAgT2JqZWN0Lmhhc093biB8fFxuICBmdW5jdGlvbiAob2JqZWN0LCBwcm9wZXJ0eSkge1xuICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNvbnZlcnQgdW5kZWZpbmVkIG9yIG51bGwgdG8gb2JqZWN0Jyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChuZXcgT2JqZWN0KG9iamVjdCksIHByb3BlcnR5KTtcbiAgfTtcblxuZXhwb3J0cy5taXhpbiA9ICh0YXJnZXQsIHNvdXJjZSkgPT4ge1xuICBmb3IgKGNvbnN0IGtleSBpbiBzb3VyY2UpIHtcbiAgICBpZiAoZXhwb3J0cy5oYXNPd24oc291cmNlLCBrZXkpKSB7XG4gICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBDaGVjayBpZiB0aGUgcmVzcG9uc2UgaXMgY29tcHJlc3NlZCB1c2luZyBHemlwIG9yIERlZmxhdGUuXG4gKiBAcGFyYW0ge09iamVjdH0gcmVzXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5cbmV4cG9ydHMuaXNHemlwT3JEZWZsYXRlRW5jb2RpbmcgPSAocmVzKSA9PiB7XG4gIHJldHVybiBuZXcgUmVnRXhwKC9eXFxzKig/OmRlZmxhdGV8Z3ppcClcXHMqJC8pLnRlc3QocmVzLmhlYWRlcnNbJ2NvbnRlbnQtZW5jb2RpbmcnXSk7XG59O1xuXG4vKipcbiAqIENoZWNrIGlmIHRoZSByZXNwb25zZSBpcyBjb21wcmVzc2VkIHVzaW5nIEJyb3RsaS5cbiAqIEBwYXJhbSB7T2JqZWN0fSByZXNcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKi9cblxuZXhwb3J0cy5pc0Jyb3RsaUVuY29kaW5nID0gKHJlcykgPT4ge1xuICByZXR1cm4gbmV3IFJlZ0V4cCgvXlxccyooPzpicilcXHMqJC8pLnRlc3QocmVzLmhlYWRlcnNbJ2NvbnRlbnQtZW5jb2RpbmcnXSk7XG59O1xuIl0sIm1hcHBpbmdzIjoiOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBQSxPQUFPLENBQUNDLElBQUksR0FBSUMsT0FBTyxJQUFLQSxPQUFPLENBQUNDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQ0MsS0FBSyxDQUFDLENBQUM7O0FBRTFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBSixPQUFPLENBQUNLLE1BQU0sR0FBSUMsS0FBSyxJQUFLO0VBQzFCLE1BQU1DLE1BQU0sR0FBRyxDQUFDLENBQUM7RUFDakIsS0FBSyxNQUFNTCxPQUFPLElBQUlJLEtBQUssQ0FBQ0gsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFO0lBQzFDLE1BQU1LLEtBQUssR0FBR04sT0FBTyxDQUFDQyxLQUFLLENBQUMsT0FBTyxDQUFDO0lBQ3BDLE1BQU1NLEdBQUcsR0FBR0QsS0FBSyxDQUFDSixLQUFLLENBQUMsQ0FBQztJQUN6QixNQUFNRSxLQUFLLEdBQUdFLEtBQUssQ0FBQ0osS0FBSyxDQUFDLENBQUM7SUFFM0IsSUFBSUssR0FBRyxJQUFJSCxLQUFLLEVBQUVDLE1BQU0sQ0FBQ0UsR0FBRyxDQUFDLEdBQUdILEtBQUs7RUFDdkM7RUFFQSxPQUFPQyxNQUFNO0FBQ2YsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQVAsT0FBTyxDQUFDVSxVQUFVLEdBQUlKLEtBQUssSUFBSztFQUM5QixNQUFNQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0VBQ2pCLEtBQUssTUFBTUwsT0FBTyxJQUFJSSxLQUFLLENBQUNILEtBQUssQ0FBQyxPQUFPLENBQUMsRUFBRTtJQUMxQyxNQUFNSyxLQUFLLEdBQUdOLE9BQU8sQ0FBQ0MsS0FBSyxDQUFDLE9BQU8sQ0FBQztJQUNwQyxNQUFNUSxHQUFHLEdBQUdILEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQ0ksS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNqQyxNQUFNQyxHQUFHLEdBQUdMLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQ0wsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDUyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ25ETCxNQUFNLENBQUNNLEdBQUcsQ0FBQyxHQUFHRixHQUFHO0VBQ25CO0VBRUEsT0FBT0osTUFBTTtBQUNmLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUFQLE9BQU8sQ0FBQ2MsV0FBVyxHQUFHLENBQUNDLE1BQU0sRUFBRUMsYUFBYSxLQUFLO0VBQy9DLE9BQU9ELE1BQU0sQ0FBQyxjQUFjLENBQUM7RUFDN0IsT0FBT0EsTUFBTSxDQUFDLGdCQUFnQixDQUFDO0VBQy9CLE9BQU9BLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQztFQUNsQyxPQUFPQSxNQUFNLENBQUNFLElBQUk7RUFDbEI7RUFDQSxJQUFJRCxhQUFhLEVBQUU7SUFDakIsT0FBT0QsTUFBTSxDQUFDRyxhQUFhO0lBQzNCLE9BQU9ILE1BQU0sQ0FBQ0ksTUFBTTtFQUN0QjtFQUVBLE9BQU9KLE1BQU07QUFDZixDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FmLE9BQU8sQ0FBQ29CLFFBQVEsR0FBSWIsTUFBTSxJQUFLO0VBQzdCLE9BQU9BLE1BQU0sS0FBSyxJQUFJLElBQUksT0FBT0EsTUFBTSxLQUFLLFFBQVE7QUFDdEQsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQVAsT0FBTyxDQUFDcUIsTUFBTSxHQUNaQyxNQUFNLENBQUNELE1BQU0sSUFDYixVQUFVZCxNQUFNLEVBQUVnQixRQUFRLEVBQUU7RUFDMUIsSUFBSWhCLE1BQU0sSUFBSSxJQUFJLEVBQUU7SUFDbEIsTUFBTSxJQUFJaUIsU0FBUyxDQUFDLDRDQUE0QyxDQUFDO0VBQ25FO0VBRUEsT0FBT0YsTUFBTSxDQUFDRyxTQUFTLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDLElBQUlMLE1BQU0sQ0FBQ2YsTUFBTSxDQUFDLEVBQUVnQixRQUFRLENBQUM7QUFDM0UsQ0FBQztBQUVIdkIsT0FBTyxDQUFDNEIsS0FBSyxHQUFHLENBQUNDLE1BQU0sRUFBRUMsTUFBTSxLQUFLO0VBQ2xDLEtBQUssTUFBTXJCLEdBQUcsSUFBSXFCLE1BQU0sRUFBRTtJQUN4QixJQUFJOUIsT0FBTyxDQUFDcUIsTUFBTSxDQUFDUyxNQUFNLEVBQUVyQixHQUFHLENBQUMsRUFBRTtNQUMvQm9CLE1BQU0sQ0FBQ3BCLEdBQUcsQ0FBQyxHQUFHcUIsTUFBTSxDQUFDckIsR0FBRyxDQUFDO0lBQzNCO0VBQ0Y7QUFDRixDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUFULE9BQU8sQ0FBQytCLHVCQUF1QixHQUFJQyxHQUFHLElBQUs7RUFDekMsT0FBTyxJQUFJQyxNQUFNLENBQUMsMEJBQTBCLENBQUMsQ0FBQ0MsSUFBSSxDQUFDRixHQUFHLENBQUNHLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0FBQ3JGLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQW5DLE9BQU8sQ0FBQ29DLGdCQUFnQixHQUFJSixHQUFHLElBQUs7RUFDbEMsT0FBTyxJQUFJQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQ0MsSUFBSSxDQUFDRixHQUFHLENBQUNHLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0FBQzNFLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0="],"names":[],"mappings":"AAAA;AAEA;;;;;;CAMC,GAED,QAAQ,IAAI,GAAG,CAAA,UAAW,QAAQ,KAAK,CAAC,SAAS,KAAK;AAEtD;;;;;;CAMC,GAED,QAAQ,MAAM,GAAG,CAAA;IACf,MAAM,SAAS,CAAC;IAChB,KAAK,MAAM,WAAW,MAAM,KAAK,CAAC,SAAU;QAC1C,MAAM,QAAQ,QAAQ,KAAK,CAAC;QAC5B,MAAM,MAAM,MAAM,KAAK;QACvB,MAAM,QAAQ,MAAM,KAAK;QACzB,IAAI,OAAO,OAAO,MAAM,CAAC,IAAI,GAAG;IAClC;IACA,OAAO;AACT;AAEA;;;;;;CAMC,GAED,QAAQ,UAAU,GAAG,CAAA;IACnB,MAAM,SAAS,CAAC;IAChB,KAAK,MAAM,WAAW,MAAM,KAAK,CAAC,SAAU;QAC1C,MAAM,QAAQ,QAAQ,KAAK,CAAC;QAC5B,MAAM,MAAM,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC;QAC/B,MAAM,MAAM,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC;QACjD,MAAM,CAAC,IAAI,GAAG;IAChB;IACA,OAAO;AACT;AAEA;;;;;;CAMC,GAED,QAAQ,WAAW,GAAG,CAAC,QAAQ;IAC7B,OAAO,MAAM,CAAC,eAAe;IAC7B,OAAO,MAAM,CAAC,iBAAiB;IAC/B,OAAO,MAAM,CAAC,oBAAoB;IAClC,OAAO,OAAO,IAAI;IAClB,WAAW;IACX,IAAI,eAAe;QACjB,OAAO,OAAO,aAAa;QAC3B,OAAO,OAAO,MAAM;IACtB;IACA,OAAO;AACT;AAEA;;;;;;CAMC,GACD,QAAQ,QAAQ,GAAG,CAAA;IACjB,OAAO,WAAW,QAAQ,OAAO,WAAW;AAC9C;AAEA;;;;;CAKC,GACD,QAAQ,MAAM,GAAG,OAAO,MAAM,IAAI,SAAU,MAAM,EAAE,QAAQ;IAC1D,IAAI,UAAU,MAAM;QAClB,MAAM,IAAI,UAAU;IACtB;IACA,OAAO,OAAO,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,OAAO,SAAS;AAClE;AACA,QAAQ,KAAK,GAAG,CAAC,QAAQ;IACvB,IAAK,MAAM,OAAO,OAAQ;QACxB,IAAI,QAAQ,MAAM,CAAC,QAAQ,MAAM;YAC/B,MAAM,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI;QAC3B;IACF;AACF;AAEA;;;;CAIC,GAED,QAAQ,uBAAuB,GAAG,CAAA;IAChC,OAAO,IAAI,OAAO,4BAA4B,IAAI,CAAC,IAAI,OAAO,CAAC,mBAAmB;AACpF;AAEA;;;;CAIC,GAED,QAAQ,gBAAgB,GAAG,CAAA;IACzB,OAAO,IAAI,OAAO,kBAAkB,IAAI,CAAC,IAAI,OAAO,CAAC,mBAAmB;AAC1E,GACA,o4OAAo4O"}},
    {"offset": {"line": 103, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 107, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/superagent/lib/request-base.js"],"sourcesContent":["\"use strict\";\n\n/**\n * Module of mixed-in functions shared between node and client code\n */\nconst {\n  isObject,\n  hasOwn\n} = require('./utils');\n\n/**\n * Expose `RequestBase`.\n */\n\nmodule.exports = RequestBase;\n\n/**\n * Initialize a new `RequestBase`.\n *\n * @api public\n */\n\nfunction RequestBase() {}\n\n/**\n * Clear previous timeout.\n *\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.clearTimeout = function () {\n  clearTimeout(this._timer);\n  clearTimeout(this._responseTimeoutTimer);\n  clearTimeout(this._uploadTimeoutTimer);\n  delete this._timer;\n  delete this._responseTimeoutTimer;\n  delete this._uploadTimeoutTimer;\n  return this;\n};\n\n/**\n * Override default response body parser\n *\n * This function will be called to convert incoming data into request.body\n *\n * @param {Function}\n * @api public\n */\n\nRequestBase.prototype.parse = function (fn) {\n  this._parser = fn;\n  return this;\n};\n\n/**\n * Set format of binary response body.\n * In browser valid formats are 'blob' and 'arraybuffer',\n * which return Blob and ArrayBuffer, respectively.\n *\n * In Node all values result in Buffer.\n *\n * Examples:\n *\n *      req.get('/')\n *        .responseType('blob')\n *        .end(callback);\n *\n * @param {String} val\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.responseType = function (value) {\n  this._responseType = value;\n  return this;\n};\n\n/**\n * Override default request body serializer\n *\n * This function will be called to convert data set via .send or .attach into payload to send\n *\n * @param {Function}\n * @api public\n */\n\nRequestBase.prototype.serialize = function (fn) {\n  this._serializer = fn;\n  return this;\n};\n\n/**\n * Set timeouts.\n *\n * - response timeout is time between sending request and receiving the first byte of the response. Includes DNS and connection time.\n * - deadline is the time from start of the request to receiving response body in full. If the deadline is too short large files may not load at all on slow connections.\n * - upload is the time  since last bit of data was sent or received. This timeout works only if deadline timeout is off\n *\n * Value of 0 or false means no timeout.\n *\n * @param {Number|Object} ms or {response, deadline}\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.timeout = function (options) {\n  if (!options || typeof options !== 'object') {\n    this._timeout = options;\n    this._responseTimeout = 0;\n    this._uploadTimeout = 0;\n    return this;\n  }\n  for (const option in options) {\n    if (hasOwn(options, option)) {\n      switch (option) {\n        case 'deadline':\n          this._timeout = options.deadline;\n          break;\n        case 'response':\n          this._responseTimeout = options.response;\n          break;\n        case 'upload':\n          this._uploadTimeout = options.upload;\n          break;\n        default:\n          console.warn('Unknown timeout option', option);\n      }\n    }\n  }\n  return this;\n};\n\n/**\n * Set number of retry attempts on error.\n *\n * Failed requests will be retried 'count' times if timeout or err.code >= 500.\n *\n * @param {Number} count\n * @param {Function} [fn]\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.retry = function (count, fn) {\n  // Default to 1 if no count passed or true\n  if (arguments.length === 0 || count === true) count = 1;\n  if (count <= 0) count = 0;\n  this._maxRetries = count;\n  this._retries = 0;\n  this._retryCallback = fn;\n  return this;\n};\n\n//\n// NOTE: we do not include ESOCKETTIMEDOUT because that is from `request` package\n//       <https://github.com/sindresorhus/got/pull/537>\n//\n// NOTE: we do not include EADDRINFO because it was removed from libuv in 2014\n//       <https://github.com/libuv/libuv/commit/02e1ebd40b807be5af46343ea873331b2ee4e9c1>\n//       <https://github.com/request/request/search?q=ESOCKETTIMEDOUT&unscoped_q=ESOCKETTIMEDOUT>\n//\n//\n// TODO: expose these as configurable defaults\n//\nconst ERROR_CODES = new Set(['ETIMEDOUT', 'ECONNRESET', 'EADDRINUSE', 'ECONNREFUSED', 'EPIPE', 'ENOTFOUND', 'ENETUNREACH', 'EAI_AGAIN']);\nconst STATUS_CODES = new Set([408, 413, 429, 500, 502, 503, 504, 521, 522, 524]);\n\n// TODO: we would need to make this easily configurable before adding it in (e.g. some might want to add POST)\n// const METHODS = new Set(['GET', 'PUT', 'HEAD', 'DELETE', 'OPTIONS', 'TRACE']);\n\n/**\n * Determine if a request should be retried.\n * (Inspired by https://github.com/sindresorhus/got#retry)\n *\n * @param {Error} err an error\n * @param {Response} [res] response\n * @returns {Boolean} if segment should be retried\n */\nRequestBase.prototype._shouldRetry = function (error, res) {\n  if (!this._maxRetries || this._retries++ >= this._maxRetries) {\n    return false;\n  }\n  if (this._retryCallback) {\n    try {\n      const override = this._retryCallback(error, res);\n      if (override === true) return true;\n      if (override === false) return false;\n      // undefined falls back to defaults\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  // TODO: we would need to make this easily configurable before adding it in (e.g. some might want to add POST)\n  /*\n  if (\n    this.req &&\n    this.req.method &&\n    !METHODS.has(this.req.method.toUpperCase())\n  )\n    return false;\n  */\n  if (res && res.status && STATUS_CODES.has(res.status)) return true;\n  if (error) {\n    if (error.code && ERROR_CODES.has(error.code)) return true;\n    // Superagent timeout\n    if (error.timeout && error.code === 'ECONNABORTED') return true;\n    if (error.crossDomain) return true;\n  }\n  return false;\n};\n\n/**\n * Retry request\n *\n * @return {Request} for chaining\n * @api private\n */\n\nRequestBase.prototype._retry = function () {\n  this.clearTimeout();\n\n  // node\n  if (this.req) {\n    this.req = null;\n    this.req = this.request();\n  }\n  this._aborted = false;\n  this.timedout = false;\n  this.timedoutError = null;\n  return this._end();\n};\n\n/**\n * Promise support\n *\n * @param {Function} resolve\n * @param {Function} [reject]\n * @return {Request}\n */\n\nRequestBase.prototype.then = function (resolve, reject) {\n  if (!this._fullfilledPromise) {\n    const self = this;\n    if (this._endCalled) {\n      console.warn('Warning: superagent request was sent twice, because both .end() and .then() were called. Never call .end() if you use promises');\n    }\n    this._fullfilledPromise = new Promise((resolve, reject) => {\n      self.on('abort', () => {\n        if (this._maxRetries && this._maxRetries > this._retries) {\n          return;\n        }\n        if (this.timedout && this.timedoutError) {\n          reject(this.timedoutError);\n          return;\n        }\n        const error = new Error('Aborted');\n        error.code = 'ABORTED';\n        error.status = this.status;\n        error.method = this.method;\n        error.url = this.url;\n        reject(error);\n      });\n      self.end((error, res) => {\n        if (error) reject(error);else resolve(res);\n      });\n    });\n  }\n  return this._fullfilledPromise.then(resolve, reject);\n};\nRequestBase.prototype.catch = function (callback) {\n  return this.then(undefined, callback);\n};\n\n/**\n * Allow for extension\n */\n\nRequestBase.prototype.use = function (fn) {\n  fn(this);\n  return this;\n};\nRequestBase.prototype.ok = function (callback) {\n  if (typeof callback !== 'function') throw new Error('Callback required');\n  this._okCallback = callback;\n  return this;\n};\nRequestBase.prototype._isResponseOK = function (res) {\n  if (!res) {\n    return false;\n  }\n  if (this._okCallback) {\n    return this._okCallback(res);\n  }\n  return res.status >= 200 && res.status < 300;\n};\n\n/**\n * Get request header `field`.\n * Case-insensitive.\n *\n * @param {String} field\n * @return {String}\n * @api public\n */\n\nRequestBase.prototype.get = function (field) {\n  return this._header[field.toLowerCase()];\n};\n\n/**\n * Get case-insensitive header `field` value.\n * This is a deprecated internal API. Use `.get(field)` instead.\n *\n * (getHeader is no longer used internally by the superagent code base)\n *\n * @param {String} field\n * @return {String}\n * @api private\n * @deprecated\n */\n\nRequestBase.prototype.getHeader = RequestBase.prototype.get;\n\n/**\n * Set header `field` to `val`, or multiple fields with one object.\n * Case-insensitive.\n *\n * Examples:\n *\n *      req.get('/')\n *        .set('Accept', 'application/json')\n *        .set('X-API-Key', 'foobar')\n *        .end(callback);\n *\n *      req.get('/')\n *        .set({ Accept: 'application/json', 'X-API-Key': 'foobar' })\n *        .end(callback);\n *\n * @param {String|Object} field\n * @param {String} val\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.set = function (field, value) {\n  if (isObject(field)) {\n    for (const key in field) {\n      if (hasOwn(field, key)) this.set(key, field[key]);\n    }\n    return this;\n  }\n  this._header[field.toLowerCase()] = value;\n  this.header[field] = value;\n  return this;\n};\n\n/**\n * Remove header `field`.\n * Case-insensitive.\n *\n * Example:\n *\n *      req.get('/')\n *        .unset('User-Agent')\n *        .end(callback);\n *\n * @param {String} field field name\n */\nRequestBase.prototype.unset = function (field) {\n  delete this._header[field.toLowerCase()];\n  delete this.header[field];\n  return this;\n};\n\n/**\n * Write the field `name` and `val`, or multiple fields with one object\n * for \"multipart/form-data\" request bodies.\n *\n * ``` js\n * request.post('/upload')\n *   .field('foo', 'bar')\n *   .end(callback);\n *\n * request.post('/upload')\n *   .field({ foo: 'bar', baz: 'qux' })\n *   .end(callback);\n * ```\n *\n * @param {String|Object} name name of field\n * @param {String|Blob|File|Buffer|fs.ReadStream} val value of field\n * @param {String} options extra options, e.g. 'blob'\n * @return {Request} for chaining\n * @api public\n */\nRequestBase.prototype.field = function (name, value, options) {\n  // name should be either a string or an object.\n  if (name === null || undefined === name) {\n    throw new Error('.field(name, val) name can not be empty');\n  }\n  if (this._data) {\n    throw new Error(\".field() can't be used if .send() is used. Please use only .send() or only .field() & .attach()\");\n  }\n  if (isObject(name)) {\n    for (const key in name) {\n      if (hasOwn(name, key)) this.field(key, name[key]);\n    }\n    return this;\n  }\n  if (Array.isArray(value)) {\n    for (const i in value) {\n      if (hasOwn(value, i)) this.field(name, value[i]);\n    }\n    return this;\n  }\n\n  // val should be defined now\n  if (value === null || undefined === value) {\n    throw new Error('.field(name, val) val can not be empty');\n  }\n  if (typeof value === 'boolean') {\n    value = String(value);\n  }\n\n  // fix https://github.com/ladjs/superagent/issues/1680\n  if (options) this._getFormData().append(name, value, options);else this._getFormData().append(name, value);\n  return this;\n};\n\n/**\n * Abort the request, and clear potential timeout.\n *\n * @return {Request} request\n * @api public\n */\nRequestBase.prototype.abort = function () {\n  if (this._aborted) {\n    return this;\n  }\n  this._aborted = true;\n  if (this.xhr) this.xhr.abort(); // browser\n  if (this.req) {\n    this.req.abort(); // node\n  }\n  this.clearTimeout();\n  this.emit('abort');\n  return this;\n};\nRequestBase.prototype._auth = function (user, pass, options, base64Encoder) {\n  switch (options.type) {\n    case 'basic':\n      this.set('Authorization', `Basic ${base64Encoder(`${user}:${pass}`)}`);\n      break;\n    case 'auto':\n      this.username = user;\n      this.password = pass;\n      break;\n    case 'bearer':\n      // usage would be .auth(accessToken, { type: 'bearer' })\n      this.set('Authorization', `Bearer ${user}`);\n      break;\n    default:\n      break;\n  }\n  return this;\n};\n\n/**\n * Enable transmission of cookies with x-domain requests.\n *\n * Note that for this to work the origin must not be\n * using \"Access-Control-Allow-Origin\" with a wildcard,\n * and also must set \"Access-Control-Allow-Credentials\"\n * to \"true\".\n * @param {Boolean} [on=true] - Set 'withCredentials' state\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.withCredentials = function (on) {\n  // This is browser-only functionality. Node side is no-op.\n  if (on === undefined) on = true;\n  this._withCredentials = on;\n  return this;\n};\n\n/**\n * Set the max redirects to `n`. Does nothing in browser XHR implementation.\n *\n * @param {Number} n\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.redirects = function (n) {\n  this._maxRedirects = n;\n  return this;\n};\n\n/**\n * Maximum size of buffered response body, in bytes. Counts uncompressed size.\n * Default 200MB.\n *\n * @param {Number} n number of bytes\n * @return {Request} for chaining\n */\nRequestBase.prototype.maxResponseSize = function (n) {\n  if (typeof n !== 'number') {\n    throw new TypeError('Invalid argument');\n  }\n  this._maxResponseSize = n;\n  return this;\n};\n\n/**\n * Convert to a plain javascript object (not JSON string) of scalar properties.\n * Note as this method is designed to return a useful non-this value,\n * it cannot be chained.\n *\n * @return {Object} describing method, url, and data of this request\n * @api public\n */\n\nRequestBase.prototype.toJSON = function () {\n  return {\n    method: this.method,\n    url: this.url,\n    data: this._data,\n    headers: this._header\n  };\n};\n\n/**\n * Send `data` as the request body, defaulting the `.type()` to \"json\" when\n * an object is given.\n *\n * Examples:\n *\n *       // manual json\n *       request.post('/user')\n *         .type('json')\n *         .send('{\"name\":\"tj\"}')\n *         .end(callback)\n *\n *       // auto json\n *       request.post('/user')\n *         .send({ name: 'tj' })\n *         .end(callback)\n *\n *       // manual x-www-form-urlencoded\n *       request.post('/user')\n *         .type('form')\n *         .send('name=tj')\n *         .end(callback)\n *\n *       // auto x-www-form-urlencoded\n *       request.post('/user')\n *         .type('form')\n *         .send({ name: 'tj' })\n *         .end(callback)\n *\n *       // defaults to x-www-form-urlencoded\n *      request.post('/user')\n *        .send('name=tobi')\n *        .send('species=ferret')\n *        .end(callback)\n *\n * @param {String|Object} data\n * @return {Request} for chaining\n * @api public\n */\n\n// eslint-disable-next-line complexity\nRequestBase.prototype.send = function (data) {\n  const isObject_ = isObject(data);\n  let type = this._header['content-type'];\n  if (this._formData) {\n    throw new Error(\".send() can't be used if .attach() or .field() is used. Please use only .send() or only .field() & .attach()\");\n  }\n  if (isObject_ && !this._data) {\n    if (Array.isArray(data)) {\n      this._data = [];\n    } else if (!this._isHost(data)) {\n      this._data = {};\n    }\n  } else if (data && this._data && this._isHost(this._data)) {\n    throw new Error(\"Can't merge these send calls\");\n  }\n\n  // merge\n  if (isObject_ && isObject(this._data)) {\n    for (const key in data) {\n      if (typeof data[key] == 'bigint' && !data[key].toJSON) throw new Error('Cannot serialize BigInt value to json');\n      if (hasOwn(data, key)) this._data[key] = data[key];\n    }\n  } else if (typeof data === 'bigint') throw new Error(\"Cannot send value of type BigInt\");else if (typeof data === 'string') {\n    // default to x-www-form-urlencoded\n    if (!type) this.type('form');\n    type = this._header['content-type'];\n    if (type) type = type.toLowerCase().trim();\n    if (type === 'application/x-www-form-urlencoded') {\n      this._data = this._data ? `${this._data}&${data}` : data;\n    } else {\n      this._data = (this._data || '') + data;\n    }\n  } else {\n    this._data = data;\n  }\n  if (!isObject_ || this._isHost(data)) {\n    return this;\n  }\n\n  // default to json\n  if (!type) this.type('json');\n  return this;\n};\n\n/**\n * Sort `querystring` by the sort function\n *\n *\n * Examples:\n *\n *       // default order\n *       request.get('/user')\n *         .query('name=Nick')\n *         .query('search=Manny')\n *         .sortQuery()\n *         .end(callback)\n *\n *       // customized sort function\n *       request.get('/user')\n *         .query('name=Nick')\n *         .query('search=Manny')\n *         .sortQuery(function(a, b){\n *           return a.length - b.length;\n *         })\n *         .end(callback)\n *\n *\n * @param {Function} sort\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.sortQuery = function (sort) {\n  // _sort default to true but otherwise can be a function or boolean\n  this._sort = typeof sort === 'undefined' ? true : sort;\n  return this;\n};\n\n/**\n * Compose querystring to append to req.url\n *\n * @api private\n */\nRequestBase.prototype._finalizeQueryString = function () {\n  const query = this._query.join('&');\n  if (query) {\n    this.url += (this.url.includes('?') ? '&' : '?') + query;\n  }\n  this._query.length = 0; // Makes the call idempotent\n\n  if (this._sort) {\n    const index = this.url.indexOf('?');\n    if (index >= 0) {\n      const queryArray = this.url.slice(index + 1).split('&');\n      if (typeof this._sort === 'function') {\n        queryArray.sort(this._sort);\n      } else {\n        queryArray.sort();\n      }\n      this.url = this.url.slice(0, index) + '?' + queryArray.join('&');\n    }\n  }\n};\n\n// For backwards compat only\nRequestBase.prototype._appendQueryString = () => {\n  console.warn('Unsupported');\n};\n\n/**\n * Invoke callback with timeout error.\n *\n * @api private\n */\n\nRequestBase.prototype._timeoutError = function (reason, timeout, errno) {\n  if (this._aborted) {\n    return;\n  }\n  const error = new Error(`${reason + timeout}ms exceeded`);\n  error.timeout = timeout;\n  error.code = 'ECONNABORTED';\n  error.errno = errno;\n  this.timedout = true;\n  this.timedoutError = error;\n  this.abort();\n  this.callback(error);\n};\nRequestBase.prototype._setTimeouts = function () {\n  const self = this;\n\n  // deadline\n  if (this._timeout && !this._timer) {\n    this._timer = setTimeout(() => {\n      self._timeoutError('Timeout of ', self._timeout, 'ETIME');\n    }, this._timeout);\n  }\n\n  // response timeout\n  if (this._responseTimeout && !this._responseTimeoutTimer) {\n    this._responseTimeoutTimer = setTimeout(() => {\n      self._timeoutError('Response timeout of ', self._responseTimeout, 'ETIMEDOUT');\n    }, this._responseTimeout);\n  }\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"],"names":[],"mappings":"AAAA;AAEA;;CAEC,GACD,MAAM,EACJ,QAAQ,EACR,MAAM,EACP;AAED;;CAEC,GAED,OAAO,OAAO,GAAG;AAEjB;;;;CAIC,GAED,SAAS,eAAe;AAExB;;;;;CAKC,GAED,YAAY,SAAS,CAAC,YAAY,GAAG;IACnC,aAAa,IAAI,CAAC,MAAM;IACxB,aAAa,IAAI,CAAC,qBAAqB;IACvC,aAAa,IAAI,CAAC,mBAAmB;IACrC,OAAO,IAAI,CAAC,MAAM;IAClB,OAAO,IAAI,CAAC,qBAAqB;IACjC,OAAO,IAAI,CAAC,mBAAmB;IAC/B,OAAO,IAAI;AACb;AAEA;;;;;;;CAOC,GAED,YAAY,SAAS,CAAC,KAAK,GAAG,SAAU,EAAE;IACxC,IAAI,CAAC,OAAO,GAAG;IACf,OAAO,IAAI;AACb;AAEA;;;;;;;;;;;;;;;;CAgBC,GAED,YAAY,SAAS,CAAC,YAAY,GAAG,SAAU,KAAK;IAClD,IAAI,CAAC,aAAa,GAAG;IACrB,OAAO,IAAI;AACb;AAEA;;;;;;;CAOC,GAED,YAAY,SAAS,CAAC,SAAS,GAAG,SAAU,EAAE;IAC5C,IAAI,CAAC,WAAW,GAAG;IACnB,OAAO,IAAI;AACb;AAEA;;;;;;;;;;;;CAYC,GAED,YAAY,SAAS,CAAC,OAAO,GAAG,SAAU,OAAO;IAC/C,IAAI,CAAC,WAAW,OAAO,YAAY,UAAU;QAC3C,IAAI,CAAC,QAAQ,GAAG;QAChB,IAAI,CAAC,gBAAgB,GAAG;QACxB,IAAI,CAAC,cAAc,GAAG;QACtB,OAAO,IAAI;IACb;IACA,IAAK,MAAM,UAAU,QAAS;QAC5B,IAAI,OAAO,SAAS,SAAS;YAC3B,OAAQ;gBACN,KAAK;oBACH,IAAI,CAAC,QAAQ,GAAG,QAAQ,QAAQ;oBAChC;gBACF,KAAK;oBACH,IAAI,CAAC,gBAAgB,GAAG,QAAQ,QAAQ;oBACxC;gBACF,KAAK;oBACH,IAAI,CAAC,cAAc,GAAG,QAAQ,MAAM;oBACpC;gBACF;oBACE,QAAQ,IAAI,CAAC,0BAA0B;YAC3C;QACF;IACF;IACA,OAAO,IAAI;AACb;AAEA;;;;;;;;;CASC,GAED,YAAY,SAAS,CAAC,KAAK,GAAG,SAAU,KAAK,EAAE,EAAE;IAC/C,0CAA0C;IAC1C,IAAI,UAAU,MAAM,KAAK,KAAK,UAAU,MAAM,QAAQ;IACtD,IAAI,SAAS,GAAG,QAAQ;IACxB,IAAI,CAAC,WAAW,GAAG;IACnB,IAAI,CAAC,QAAQ,GAAG;IAChB,IAAI,CAAC,cAAc,GAAG;IACtB,OAAO,IAAI;AACb;AAEA,EAAE;AACF,iFAAiF;AACjF,uDAAuD;AACvD,EAAE;AACF,8EAA8E;AAC9E,yFAAyF;AACzF,iGAAiG;AACjG,EAAE;AACF,EAAE;AACF,8CAA8C;AAC9C,EAAE;AACF,MAAM,cAAc,IAAI,IAAI;IAAC;IAAa;IAAc;IAAc;IAAgB;IAAS;IAAa;IAAe;CAAY;AACvI,MAAM,eAAe,IAAI,IAAI;IAAC;IAAK;IAAK;IAAK;IAAK;IAAK;IAAK;IAAK;IAAK;IAAK;CAAI;AAE/E,8GAA8G;AAC9G,iFAAiF;AAEjF;;;;;;;CAOC,GACD,YAAY,SAAS,CAAC,YAAY,GAAG,SAAU,KAAK,EAAE,GAAG;IACvD,IAAI,CAAC,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,QAAQ,MAAM,IAAI,CAAC,WAAW,EAAE;QAC5D,OAAO;IACT;IACA,IAAI,IAAI,CAAC,cAAc,EAAE;QACvB,IAAI;YACF,MAAM,WAAW,IAAI,CAAC,cAAc,CAAC,OAAO;YAC5C,IAAI,aAAa,MAAM,OAAO;YAC9B,IAAI,aAAa,OAAO,OAAO;QAC/B,mCAAmC;QACrC,EAAE,OAAO,KAAK;YACZ,QAAQ,KAAK,CAAC;QAChB;IACF;IAEA,8GAA8G;IAC9G;;;;;;;EAOA,GACA,IAAI,OAAO,IAAI,MAAM,IAAI,aAAa,GAAG,CAAC,IAAI,MAAM,GAAG,OAAO;IAC9D,IAAI,OAAO;QACT,IAAI,MAAM,IAAI,IAAI,YAAY,GAAG,CAAC,MAAM,IAAI,GAAG,OAAO;QACtD,qBAAqB;QACrB,IAAI,MAAM,OAAO,IAAI,MAAM,IAAI,KAAK,gBAAgB,OAAO;QAC3D,IAAI,MAAM,WAAW,EAAE,OAAO;IAChC;IACA,OAAO;AACT;AAEA;;;;;CAKC,GAED,YAAY,SAAS,CAAC,MAAM,GAAG;IAC7B,IAAI,CAAC,YAAY;IAEjB,OAAO;IACP,IAAI,IAAI,CAAC,GAAG,EAAE;QACZ,IAAI,CAAC,GAAG,GAAG;QACX,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,OAAO;IACzB;IACA,IAAI,CAAC,QAAQ,GAAG;IAChB,IAAI,CAAC,QAAQ,GAAG;IAChB,IAAI,CAAC,aAAa,GAAG;IACrB,OAAO,IAAI,CAAC,IAAI;AAClB;AAEA;;;;;;CAMC,GAED,YAAY,SAAS,CAAC,IAAI,GAAG,SAAU,OAAO,EAAE,MAAM;IACpD,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE;QAC5B,MAAM,OAAO,IAAI;QACjB,IAAI,IAAI,CAAC,UAAU,EAAE;YACnB,QAAQ,IAAI,CAAC;QACf;QACA,IAAI,CAAC,kBAAkB,GAAG,IAAI,QAAQ,CAAC,SAAS;YAC9C,KAAK,EAAE,CAAC,SAAS;gBACf,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,QAAQ,EAAE;oBACxD;gBACF;gBACA,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,aAAa,EAAE;oBACvC,OAAO,IAAI,CAAC,aAAa;oBACzB;gBACF;gBACA,MAAM,QAAQ,IAAI,MAAM;gBACxB,MAAM,IAAI,GAAG;gBACb,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM;gBAC1B,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM;gBAC1B,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG;gBACpB,OAAO;YACT;YACA,KAAK,GAAG,CAAC,CAAC,OAAO;gBACf,IAAI,OAAO,OAAO;qBAAY,QAAQ;YACxC;QACF;IACF;IACA,OAAO,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,SAAS;AAC/C;AACA,YAAY,SAAS,CAAC,KAAK,GAAG,SAAU,QAAQ;IAC9C,OAAO,IAAI,CAAC,IAAI,CAAC,WAAW;AAC9B;AAEA;;CAEC,GAED,YAAY,SAAS,CAAC,GAAG,GAAG,SAAU,EAAE;IACtC,GAAG,IAAI;IACP,OAAO,IAAI;AACb;AACA,YAAY,SAAS,CAAC,EAAE,GAAG,SAAU,QAAQ;IAC3C,IAAI,OAAO,aAAa,YAAY,MAAM,IAAI,MAAM;IACpD,IAAI,CAAC,WAAW,GAAG;IACnB,OAAO,IAAI;AACb;AACA,YAAY,SAAS,CAAC,aAAa,GAAG,SAAU,GAAG;IACjD,IAAI,CAAC,KAAK;QACR,OAAO;IACT;IACA,IAAI,IAAI,CAAC,WAAW,EAAE;QACpB,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B;IACA,OAAO,IAAI,MAAM,IAAI,OAAO,IAAI,MAAM,GAAG;AAC3C;AAEA;;;;;;;CAOC,GAED,YAAY,SAAS,CAAC,GAAG,GAAG,SAAU,KAAK;IACzC,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,WAAW,GAAG;AAC1C;AAEA;;;;;;;;;;CAUC,GAED,YAAY,SAAS,CAAC,SAAS,GAAG,YAAY,SAAS,CAAC,GAAG;AAE3D;;;;;;;;;;;;;;;;;;;CAmBC,GAED,YAAY,SAAS,CAAC,GAAG,GAAG,SAAU,KAAK,EAAE,KAAK;IAChD,IAAI,SAAS,QAAQ;QACnB,IAAK,MAAM,OAAO,MAAO;YACvB,IAAI,OAAO,OAAO,MAAM,IAAI,CAAC,GAAG,CAAC,KAAK,KAAK,CAAC,IAAI;QAClD;QACA,OAAO,IAAI;IACb;IACA,IAAI,CAAC,OAAO,CAAC,MAAM,WAAW,GAAG,GAAG;IACpC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG;IACrB,OAAO,IAAI;AACb;AAEA;;;;;;;;;;;CAWC,GACD,YAAY,SAAS,CAAC,KAAK,GAAG,SAAU,KAAK;IAC3C,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,WAAW,GAAG;IACxC,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM;IACzB,OAAO,IAAI;AACb;AAEA;;;;;;;;;;;;;;;;;;;CAmBC,GACD,YAAY,SAAS,CAAC,KAAK,GAAG,SAAU,IAAI,EAAE,KAAK,EAAE,OAAO;IAC1D,+CAA+C;IAC/C,IAAI,SAAS,QAAQ,cAAc,MAAM;QACvC,MAAM,IAAI,MAAM;IAClB;IACA,IAAI,IAAI,CAAC,KAAK,EAAE;QACd,MAAM,IAAI,MAAM;IAClB;IACA,IAAI,SAAS,OAAO;QAClB,IAAK,MAAM,OAAO,KAAM;YACtB,IAAI,OAAO,MAAM,MAAM,IAAI,CAAC,KAAK,CAAC,KAAK,IAAI,CAAC,IAAI;QAClD;QACA,OAAO,IAAI;IACb;IACA,IAAI,MAAM,OAAO,CAAC,QAAQ;QACxB,IAAK,MAAM,KAAK,MAAO;YACrB,IAAI,OAAO,OAAO,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;QACjD;QACA,OAAO,IAAI;IACb;IAEA,4BAA4B;IAC5B,IAAI,UAAU,QAAQ,cAAc,OAAO;QACzC,MAAM,IAAI,MAAM;IAClB;IACA,IAAI,OAAO,UAAU,WAAW;QAC9B,QAAQ,OAAO;IACjB;IAEA,sDAAsD;IACtD,IAAI,SAAS,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC,MAAM,OAAO;SAAc,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC,MAAM;IACpG,OAAO,IAAI;AACb;AAEA;;;;;CAKC,GACD,YAAY,SAAS,CAAC,KAAK,GAAG;IAC5B,IAAI,IAAI,CAAC,QAAQ,EAAE;QACjB,OAAO,IAAI;IACb;IACA,IAAI,CAAC,QAAQ,GAAG;IAChB,IAAI,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,KAAK,IAAI,UAAU;IAC1C,IAAI,IAAI,CAAC,GAAG,EAAE;QACZ,IAAI,CAAC,GAAG,CAAC,KAAK,IAAI,OAAO;IAC3B;IACA,IAAI,CAAC,YAAY;IACjB,IAAI,CAAC,IAAI,CAAC;IACV,OAAO,IAAI;AACb;AACA,YAAY,SAAS,CAAC,KAAK,GAAG,SAAU,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,aAAa;IACxE,OAAQ,QAAQ,IAAI;QAClB,KAAK;YACH,IAAI,CAAC,GAAG,CAAC,iBAAiB,CAAC,MAAM,EAAE,cAAc,CAAC,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,CAAC;YACrE;QACF,KAAK;YACH,IAAI,CAAC,QAAQ,GAAG;YAChB,IAAI,CAAC,QAAQ,GAAG;YAChB;QACF,KAAK;YACH,wDAAwD;YACxD,IAAI,CAAC,GAAG,CAAC,iBAAiB,CAAC,OAAO,EAAE,KAAK,CAAC;YAC1C;QACF;YACE;IACJ;IACA,OAAO,IAAI;AACb;AAEA;;;;;;;;;;CAUC,GAED,YAAY,SAAS,CAAC,eAAe,GAAG,SAAU,EAAE;IAClD,0DAA0D;IAC1D,IAAI,OAAO,WAAW,KAAK;IAC3B,IAAI,CAAC,gBAAgB,GAAG;IACxB,OAAO,IAAI;AACb;AAEA;;;;;;CAMC,GAED,YAAY,SAAS,CAAC,SAAS,GAAG,SAAU,CAAC;IAC3C,IAAI,CAAC,aAAa,GAAG;IACrB,OAAO,IAAI;AACb;AAEA;;;;;;CAMC,GACD,YAAY,SAAS,CAAC,eAAe,GAAG,SAAU,CAAC;IACjD,IAAI,OAAO,MAAM,UAAU;QACzB,MAAM,IAAI,UAAU;IACtB;IACA,IAAI,CAAC,gBAAgB,GAAG;IACxB,OAAO,IAAI;AACb;AAEA;;;;;;;CAOC,GAED,YAAY,SAAS,CAAC,MAAM,GAAG;IAC7B,OAAO;QACL,QAAQ,IAAI,CAAC,MAAM;QACnB,KAAK,IAAI,CAAC,GAAG;QACb,MAAM,IAAI,CAAC,KAAK;QAChB,SAAS,IAAI,CAAC,OAAO;IACvB;AACF;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAsCC,GAED,sCAAsC;AACtC,YAAY,SAAS,CAAC,IAAI,GAAG,SAAU,IAAI;IACzC,MAAM,YAAY,SAAS;IAC3B,IAAI,OAAO,IAAI,CAAC,OAAO,CAAC,eAAe;IACvC,IAAI,IAAI,CAAC,SAAS,EAAE;QAClB,MAAM,IAAI,MAAM;IAClB;IACA,IAAI,aAAa,CAAC,IAAI,CAAC,KAAK,EAAE;QAC5B,IAAI,MAAM,OAAO,CAAC,OAAO;YACvB,IAAI,CAAC,KAAK,GAAG,EAAE;QACjB,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO;YAC9B,IAAI,CAAC,KAAK,GAAG,CAAC;QAChB;IACF,OAAO,IAAI,QAAQ,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,GAAG;QACzD,MAAM,IAAI,MAAM;IAClB;IAEA,QAAQ;IACR,IAAI,aAAa,SAAS,IAAI,CAAC,KAAK,GAAG;QACrC,IAAK,MAAM,OAAO,KAAM;YACtB,IAAI,OAAO,IAAI,CAAC,IAAI,IAAI,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,IAAI,MAAM;YACvE,IAAI,OAAO,MAAM,MAAM,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI;QACpD;IACF,OAAO,IAAI,OAAO,SAAS,UAAU,MAAM,IAAI,MAAM;SAAyC,IAAI,OAAO,SAAS,UAAU;QAC1H,mCAAmC;QACnC,IAAI,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC;QACrB,OAAO,IAAI,CAAC,OAAO,CAAC,eAAe;QACnC,IAAI,MAAM,OAAO,KAAK,WAAW,GAAG,IAAI;QACxC,IAAI,SAAS,qCAAqC;YAChD,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,GAAG;QACtD,OAAO;YACL,IAAI,CAAC,KAAK,GAAG,CAAC,IAAI,CAAC,KAAK,IAAI,EAAE,IAAI;QACpC;IACF,OAAO;QACL,IAAI,CAAC,KAAK,GAAG;IACf;IACA,IAAI,CAAC,aAAa,IAAI,CAAC,OAAO,CAAC,OAAO;QACpC,OAAO,IAAI;IACb;IAEA,kBAAkB;IAClB,IAAI,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC;IACrB,OAAO,IAAI;AACb;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;CA0BC,GAED,YAAY,SAAS,CAAC,SAAS,GAAG,SAAU,IAAI;IAC9C,mEAAmE;IACnE,IAAI,CAAC,KAAK,GAAG,OAAO,SAAS,cAAc,OAAO;IAClD,OAAO,IAAI;AACb;AAEA;;;;CAIC,GACD,YAAY,SAAS,CAAC,oBAAoB,GAAG;IAC3C,MAAM,QAAQ,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;IAC/B,IAAI,OAAO;QACT,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,OAAO,MAAM,GAAG,IAAI;IACrD;IACA,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,GAAG,4BAA4B;IAEpD,IAAI,IAAI,CAAC,KAAK,EAAE;QACd,MAAM,QAAQ,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC;QAC/B,IAAI,SAAS,GAAG;YACd,MAAM,aAAa,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,QAAQ,GAAG,KAAK,CAAC;YACnD,IAAI,OAAO,IAAI,CAAC,KAAK,KAAK,YAAY;gBACpC,WAAW,IAAI,CAAC,IAAI,CAAC,KAAK;YAC5B,OAAO;gBACL,WAAW,IAAI;YACjB;YACA,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,SAAS,MAAM,WAAW,IAAI,CAAC;QAC9D;IACF;AACF;AAEA,4BAA4B;AAC5B,YAAY,SAAS,CAAC,kBAAkB,GAAG;IACzC,QAAQ,IAAI,CAAC;AACf;AAEA;;;;CAIC,GAED,YAAY,SAAS,CAAC,aAAa,GAAG,SAAU,MAAM,EAAE,OAAO,EAAE,KAAK;IACpE,IAAI,IAAI,CAAC,QAAQ,EAAE;QACjB;IACF;IACA,MAAM,QAAQ,IAAI,MAAM,CAAC,EAAE,SAAS,QAAQ,WAAW,CAAC;IACxD,MAAM,OAAO,GAAG;IAChB,MAAM,IAAI,GAAG;IACb,MAAM,KAAK,GAAG;IACd,IAAI,CAAC,QAAQ,GAAG;IAChB,IAAI,CAAC,aAAa,GAAG;IACrB,IAAI,CAAC,KAAK;IACV,IAAI,CAAC,QAAQ,CAAC;AAChB;AACA,YAAY,SAAS,CAAC,YAAY,GAAG;IACnC,MAAM,OAAO,IAAI;IAEjB,WAAW;IACX,IAAI,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;QACjC,IAAI,CAAC,MAAM,GAAG,WAAW;YACvB,KAAK,aAAa,CAAC,eAAe,KAAK,QAAQ,EAAE;QACnD,GAAG,IAAI,CAAC,QAAQ;IAClB;IAEA,mBAAmB;IACnB,IAAI,IAAI,CAAC,gBAAgB,IAAI,CAAC,IAAI,CAAC,qBAAqB,EAAE;QACxD,IAAI,CAAC,qBAAqB,GAAG,WAAW;YACtC,KAAK,aAAa,CAAC,wBAAwB,KAAK,gBAAgB,EAAE;QACpE,GAAG,IAAI,CAAC,gBAAgB;IAC1B;AACF,GACA,485CAA485C"}},
    {"offset": {"line": 759, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 763, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/superagent/lib/response-base.js"],"sourcesContent":["\"use strict\";\n\n/**\n * Module dependencies.\n */\n\nconst utils = require('./utils');\n\n/**\n * Expose `ResponseBase`.\n */\n\nmodule.exports = ResponseBase;\n\n/**\n * Initialize a new `ResponseBase`.\n *\n * @api public\n */\n\nfunction ResponseBase() {}\n\n/**\n * Get case-insensitive `field` value.\n *\n * @param {String} field\n * @return {String}\n * @api public\n */\n\nResponseBase.prototype.get = function (field) {\n  return this.header[field.toLowerCase()];\n};\n\n/**\n * Set header related properties:\n *\n *   - `.type` the content type without params\n *\n * A response of \"Content-Type: text/plain; charset=utf-8\"\n * will provide you with a `.type` of \"text/plain\".\n *\n * @param {Object} header\n * @api private\n */\n\nResponseBase.prototype._setHeaderProperties = function (header) {\n  // TODO: moar!\n  // TODO: make this a util\n\n  // content-type\n  const ct = header['content-type'] || '';\n  this.type = utils.type(ct);\n\n  // params\n  const parameters = utils.params(ct);\n  for (const key in parameters) {\n    if (Object.prototype.hasOwnProperty.call(parameters, key)) this[key] = parameters[key];\n  }\n  this.links = {};\n\n  // links\n  try {\n    if (header.link) {\n      this.links = utils.parseLinks(header.link);\n    }\n  } catch (err) {\n    // ignore\n  }\n};\n\n/**\n * Set flags such as `.ok` based on `status`.\n *\n * For example a 2xx response will give you a `.ok` of __true__\n * whereas 5xx will be __false__ and `.error` will be __true__. The\n * `.clientError` and `.serverError` are also available to be more\n * specific, and `.statusType` is the class of error ranging from 1..5\n * sometimes useful for mapping respond colors etc.\n *\n * \"sugar\" properties are also defined for common cases. Currently providing:\n *\n *   - .noContent\n *   - .badRequest\n *   - .unauthorized\n *   - .notAcceptable\n *   - .notFound\n *\n * @param {Number} status\n * @api private\n */\n\nResponseBase.prototype._setStatusProperties = function (status) {\n  const type = Math.trunc(status / 100);\n\n  // status / class\n  this.statusCode = status;\n  this.status = this.statusCode;\n  this.statusType = type;\n\n  // basics\n  this.info = type === 1;\n  this.ok = type === 2;\n  this.redirect = type === 3;\n  this.clientError = type === 4;\n  this.serverError = type === 5;\n  this.error = type === 4 || type === 5 ? this.toError() : false;\n\n  // sugar\n  this.created = status === 201;\n  this.accepted = status === 202;\n  this.noContent = status === 204;\n  this.badRequest = status === 400;\n  this.unauthorized = status === 401;\n  this.notAcceptable = status === 406;\n  this.forbidden = status === 403;\n  this.notFound = status === 404;\n  this.unprocessableEntity = status === 422;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ1dGlscyIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiUmVzcG9uc2VCYXNlIiwicHJvdG90eXBlIiwiZ2V0IiwiZmllbGQiLCJoZWFkZXIiLCJ0b0xvd2VyQ2FzZSIsIl9zZXRIZWFkZXJQcm9wZXJ0aWVzIiwiY3QiLCJ0eXBlIiwicGFyYW1ldGVycyIsInBhcmFtcyIsImtleSIsIk9iamVjdCIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImxpbmtzIiwibGluayIsInBhcnNlTGlua3MiLCJlcnIiLCJfc2V0U3RhdHVzUHJvcGVydGllcyIsInN0YXR1cyIsIk1hdGgiLCJ0cnVuYyIsInN0YXR1c0NvZGUiLCJzdGF0dXNUeXBlIiwiaW5mbyIsIm9rIiwicmVkaXJlY3QiLCJjbGllbnRFcnJvciIsInNlcnZlckVycm9yIiwiZXJyb3IiLCJ0b0Vycm9yIiwiY3JlYXRlZCIsImFjY2VwdGVkIiwibm9Db250ZW50IiwiYmFkUmVxdWVzdCIsInVuYXV0aG9yaXplZCIsIm5vdEFjY2VwdGFibGUiLCJmb3JiaWRkZW4iLCJub3RGb3VuZCIsInVucHJvY2Vzc2FibGVFbnRpdHkiXSwic291cmNlcyI6WyIuLi9zcmMvcmVzcG9uc2UtYmFzZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxuY29uc3QgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cbi8qKlxuICogRXhwb3NlIGBSZXNwb25zZUJhc2VgLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gUmVzcG9uc2VCYXNlO1xuXG4vKipcbiAqIEluaXRpYWxpemUgYSBuZXcgYFJlc3BvbnNlQmFzZWAuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBSZXNwb25zZUJhc2UoKSB7fVxuXG4vKipcbiAqIEdldCBjYXNlLWluc2Vuc2l0aXZlIGBmaWVsZGAgdmFsdWUuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGZpZWxkXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblJlc3BvbnNlQmFzZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGZpZWxkKSB7XG4gIHJldHVybiB0aGlzLmhlYWRlcltmaWVsZC50b0xvd2VyQ2FzZSgpXTtcbn07XG5cbi8qKlxuICogU2V0IGhlYWRlciByZWxhdGVkIHByb3BlcnRpZXM6XG4gKlxuICogICAtIGAudHlwZWAgdGhlIGNvbnRlbnQgdHlwZSB3aXRob3V0IHBhcmFtc1xuICpcbiAqIEEgcmVzcG9uc2Ugb2YgXCJDb250ZW50LVR5cGU6IHRleHQvcGxhaW47IGNoYXJzZXQ9dXRmLThcIlxuICogd2lsbCBwcm92aWRlIHlvdSB3aXRoIGEgYC50eXBlYCBvZiBcInRleHQvcGxhaW5cIi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaGVhZGVyXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5SZXNwb25zZUJhc2UucHJvdG90eXBlLl9zZXRIZWFkZXJQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKGhlYWRlcikge1xuICAvLyBUT0RPOiBtb2FyIVxuICAvLyBUT0RPOiBtYWtlIHRoaXMgYSB1dGlsXG5cbiAgLy8gY29udGVudC10eXBlXG4gIGNvbnN0IGN0ID0gaGVhZGVyWydjb250ZW50LXR5cGUnXSB8fCAnJztcbiAgdGhpcy50eXBlID0gdXRpbHMudHlwZShjdCk7XG5cbiAgLy8gcGFyYW1zXG4gIGNvbnN0IHBhcmFtZXRlcnMgPSB1dGlscy5wYXJhbXMoY3QpO1xuICBmb3IgKGNvbnN0IGtleSBpbiBwYXJhbWV0ZXJzKSB7XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChwYXJhbWV0ZXJzLCBrZXkpKVxuICAgICAgdGhpc1trZXldID0gcGFyYW1ldGVyc1trZXldO1xuICB9XG5cbiAgdGhpcy5saW5rcyA9IHt9O1xuXG4gIC8vIGxpbmtzXG4gIHRyeSB7XG4gICAgaWYgKGhlYWRlci5saW5rKSB7XG4gICAgICB0aGlzLmxpbmtzID0gdXRpbHMucGFyc2VMaW5rcyhoZWFkZXIubGluayk7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBpZ25vcmVcbiAgfVxufTtcblxuLyoqXG4gKiBTZXQgZmxhZ3Mgc3VjaCBhcyBgLm9rYCBiYXNlZCBvbiBgc3RhdHVzYC5cbiAqXG4gKiBGb3IgZXhhbXBsZSBhIDJ4eCByZXNwb25zZSB3aWxsIGdpdmUgeW91IGEgYC5va2Agb2YgX190cnVlX19cbiAqIHdoZXJlYXMgNXh4IHdpbGwgYmUgX19mYWxzZV9fIGFuZCBgLmVycm9yYCB3aWxsIGJlIF9fdHJ1ZV9fLiBUaGVcbiAqIGAuY2xpZW50RXJyb3JgIGFuZCBgLnNlcnZlckVycm9yYCBhcmUgYWxzbyBhdmFpbGFibGUgdG8gYmUgbW9yZVxuICogc3BlY2lmaWMsIGFuZCBgLnN0YXR1c1R5cGVgIGlzIHRoZSBjbGFzcyBvZiBlcnJvciByYW5naW5nIGZyb20gMS4uNVxuICogc29tZXRpbWVzIHVzZWZ1bCBmb3IgbWFwcGluZyByZXNwb25kIGNvbG9ycyBldGMuXG4gKlxuICogXCJzdWdhclwiIHByb3BlcnRpZXMgYXJlIGFsc28gZGVmaW5lZCBmb3IgY29tbW9uIGNhc2VzLiBDdXJyZW50bHkgcHJvdmlkaW5nOlxuICpcbiAqICAgLSAubm9Db250ZW50XG4gKiAgIC0gLmJhZFJlcXVlc3RcbiAqICAgLSAudW5hdXRob3JpemVkXG4gKiAgIC0gLm5vdEFjY2VwdGFibGVcbiAqICAgLSAubm90Rm91bmRcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gc3RhdHVzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5SZXNwb25zZUJhc2UucHJvdG90eXBlLl9zZXRTdGF0dXNQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKHN0YXR1cykge1xuICBjb25zdCB0eXBlID0gTWF0aC50cnVuYyhzdGF0dXMgLyAxMDApO1xuXG4gIC8vIHN0YXR1cyAvIGNsYXNzXG4gIHRoaXMuc3RhdHVzQ29kZSA9IHN0YXR1cztcbiAgdGhpcy5zdGF0dXMgPSB0aGlzLnN0YXR1c0NvZGU7XG4gIHRoaXMuc3RhdHVzVHlwZSA9IHR5cGU7XG5cbiAgLy8gYmFzaWNzXG4gIHRoaXMuaW5mbyA9IHR5cGUgPT09IDE7XG4gIHRoaXMub2sgPSB0eXBlID09PSAyO1xuICB0aGlzLnJlZGlyZWN0ID0gdHlwZSA9PT0gMztcbiAgdGhpcy5jbGllbnRFcnJvciA9IHR5cGUgPT09IDQ7XG4gIHRoaXMuc2VydmVyRXJyb3IgPSB0eXBlID09PSA1O1xuICB0aGlzLmVycm9yID0gdHlwZSA9PT0gNCB8fCB0eXBlID09PSA1ID8gdGhpcy50b0Vycm9yKCkgOiBmYWxzZTtcblxuICAvLyBzdWdhclxuICB0aGlzLmNyZWF0ZWQgPSBzdGF0dXMgPT09IDIwMTtcbiAgdGhpcy5hY2NlcHRlZCA9IHN0YXR1cyA9PT0gMjAyO1xuICB0aGlzLm5vQ29udGVudCA9IHN0YXR1cyA9PT0gMjA0O1xuICB0aGlzLmJhZFJlcXVlc3QgPSBzdGF0dXMgPT09IDQwMDtcbiAgdGhpcy51bmF1dGhvcml6ZWQgPSBzdGF0dXMgPT09IDQwMTtcbiAgdGhpcy5ub3RBY2NlcHRhYmxlID0gc3RhdHVzID09PSA0MDY7XG4gIHRoaXMuZm9yYmlkZGVuID0gc3RhdHVzID09PSA0MDM7XG4gIHRoaXMubm90Rm91bmQgPSBzdGF0dXMgPT09IDQwNDtcbiAgdGhpcy51bnByb2Nlc3NhYmxlRW50aXR5ID0gc3RhdHVzID09PSA0MjI7XG59O1xuIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFDQTs7QUFFQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxTQUFTLENBQUM7O0FBRWhDO0FBQ0E7QUFDQTs7QUFFQUMsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLFlBQVk7O0FBRTdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBU0EsWUFBWUEsQ0FBQSxFQUFHLENBQUM7O0FBRXpCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBQSxZQUFZLENBQUNDLFNBQVMsQ0FBQ0MsR0FBRyxHQUFHLFVBQVVDLEtBQUssRUFB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"],"names":[],"mappings":"AAAA;AAEA;;CAEC,GAED,MAAM;AAEN;;CAEC,GAED,OAAO,OAAO,GAAG;AAEjB;;;;CAIC,GAED,SAAS,gBAAgB;AAEzB;;;;;;CAMC,GAED,aAAa,SAAS,CAAC,GAAG,GAAG,SAAU,KAAK;IAC1C,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,WAAW,GAAG;AACzC;AAEA;;;;;;;;;;CAUC,GAED,aAAa,SAAS,CAAC,oBAAoB,GAAG,SAAU,MAAM;IAC5D,cAAc;IACd,yBAAyB;IAEzB,eAAe;IACf,MAAM,KAAK,MAAM,CAAC,eAAe,IAAI;IACrC,IAAI,CAAC,IAAI,GAAG,MAAM,IAAI,CAAC;IAEvB,SAAS;IACT,MAAM,aAAa,MAAM,MAAM,CAAC;IAChC,IAAK,MAAM,OAAO,WAAY;QAC5B,IAAI,OAAO,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,YAAY,MAAM,IAAI,CAAC,IAAI,GAAG,UAAU,CAAC,IAAI;IACxF;IACA,IAAI,CAAC,KAAK,GAAG,CAAC;IAEd,QAAQ;IACR,IAAI;QACF,IAAI,OAAO,IAAI,EAAE;YACf,IAAI,CAAC,KAAK,GAAG,MAAM,UAAU,CAAC,OAAO,IAAI;QAC3C;IACF,EAAE,OAAO,KAAK;IACZ,SAAS;IACX;AACF;AAEA;;;;;;;;;;;;;;;;;;;CAmBC,GAED,aAAa,SAAS,CAAC,oBAAoB,GAAG,SAAU,MAAM;IAC5D,MAAM,OAAO,KAAK,KAAK,CAAC,SAAS;IAEjC,iBAAiB;IACjB,IAAI,CAAC,UAAU,GAAG;IAClB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,UAAU;IAC7B,IAAI,CAAC,UAAU,GAAG;IAElB,SAAS;IACT,IAAI,CAAC,IAAI,GAAG,SAAS;IACrB,IAAI,CAAC,EAAE,GAAG,SAAS;IACnB,IAAI,CAAC,QAAQ,GAAG,SAAS;IACzB,IAAI,CAAC,WAAW,GAAG,SAAS;IAC5B,IAAI,CAAC,WAAW,GAAG,SAAS;IAC5B,IAAI,CAAC,KAAK,GAAG,SAAS,KAAK,SAAS,IAAI,IAAI,CAAC,OAAO,KAAK;IAEzD,QAAQ;IACR,IAAI,CAAC,OAAO,GAAG,WAAW;IAC1B,IAAI,CAAC,QAAQ,GAAG,WAAW;IAC3B,IAAI,CAAC,SAAS,GAAG,WAAW;IAC5B,IAAI,CAAC,UAAU,GAAG,WAAW;IAC7B,IAAI,CAAC,YAAY,GAAG,WAAW;IAC/B,IAAI,CAAC,aAAa,GAAG,WAAW;IAChC,IAAI,CAAC,SAAS,GAAG,WAAW;IAC5B,IAAI,CAAC,QAAQ,GAAG,WAAW;IAC3B,IAAI,CAAC,mBAAmB,GAAG,WAAW;AACxC,GACA,4sOAA4sO"}},
    {"offset": {"line": 858, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 862, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/superagent/lib/agent-base.js"],"sourcesContent":["\"use strict\";\n\nconst defaults = ['use', 'on', 'once', 'set', 'query', 'type', 'accept', 'auth', 'withCredentials', 'sortQuery', 'retry', 'ok', 'redirects', 'timeout', 'buffer', 'serialize', 'parse', 'ca', 'key', 'pfx', 'cert', 'disableTLSCerts'];\nclass Agent {\n  constructor() {\n    this._defaults = [];\n  }\n  _setDefaults(request) {\n    for (const def of this._defaults) {\n      request[def.fn](...def.args);\n    }\n  }\n}\nfor (const fn of defaults) {\n  // Default setting for all requests from this agent\n  Agent.prototype[fn] = function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    this._defaults.push({\n      fn,\n      args\n    });\n    return this;\n  };\n}\nmodule.exports = Agent;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkZWZhdWx0cyIsIkFnZW50IiwiY29uc3RydWN0b3IiLCJfZGVmYXVsdHMiLCJfc2V0RGVmYXVsdHMiLCJyZXF1ZXN0IiwiZGVmIiwiZm4iLCJhcmdzIiwicHJvdG90eXBlIiwiX2xlbiIsImFyZ3VtZW50cyIsImxlbmd0aCIsIkFycmF5IiwiX2tleSIsInB1c2giLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vc3JjL2FnZW50LWJhc2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZGVmYXVsdHMgPSBbXG4gICd1c2UnLFxuICAnb24nLFxuICAnb25jZScsXG4gICdzZXQnLFxuICAncXVlcnknLFxuICAndHlwZScsXG4gICdhY2NlcHQnLFxuICAnYXV0aCcsXG4gICd3aXRoQ3JlZGVudGlhbHMnLFxuICAnc29ydFF1ZXJ5JyxcbiAgJ3JldHJ5JyxcbiAgJ29rJyxcbiAgJ3JlZGlyZWN0cycsXG4gICd0aW1lb3V0JyxcbiAgJ2J1ZmZlcicsXG4gICdzZXJpYWxpemUnLFxuICAncGFyc2UnLFxuICAnY2EnLFxuICAna2V5JyxcbiAgJ3BmeCcsXG4gICdjZXJ0JyxcbiAgJ2Rpc2FibGVUTFNDZXJ0cydcbl1cblxuY2xhc3MgQWdlbnQge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgdGhpcy5fZGVmYXVsdHMgPSBbXTtcbiAgfVxuXG4gIF9zZXREZWZhdWx0cyAocmVxdWVzdCkge1xuICAgIGZvciAoY29uc3QgZGVmIG9mIHRoaXMuX2RlZmF1bHRzKSB7XG4gICAgICByZXF1ZXN0W2RlZi5mbl0oLi4uZGVmLmFyZ3MpO1xuICAgIH1cbiAgfVxufVxuXG5mb3IgKGNvbnN0IGZuIG9mIGRlZmF1bHRzKSB7XG4gIC8vIERlZmF1bHQgc2V0dGluZyBmb3IgYWxsIHJlcXVlc3RzIGZyb20gdGhpcyBhZ2VudFxuICBBZ2VudC5wcm90b3R5cGVbZm5dID0gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICB0aGlzLl9kZWZhdWx0cy5wdXNoKHsgZm4sIGFyZ3MgfSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG59XG5cblxubW9kdWxlLmV4cG9ydHMgPSBBZ2VudDtcbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNQSxRQUFRLEdBQUcsQ0FDZixLQUFLLEVBQ0wsSUFBSSxFQUNKLE1BQU0sRUFDTixLQUFLLEVBQ0wsT0FBTyxFQUNQLE1BQU0sRUFDTixRQUFRLEVBQ1IsTUFBTSxFQUNOLGlCQUFpQixFQUNqQixXQUFXLEVBQ1gsT0FBTyxFQUNQLElBQUksRUFDSixXQUFXLEVBQ1gsU0FBUyxFQUNULFFBQVEsRUFDUixXQUFXLEVBQ1gsT0FBTyxFQUNQLElBQUksRUFDSixLQUFLLEVBQ0wsS0FBSyxFQUNMLE1BQU0sRUFDTixpQkFBaUIsQ0FDbEI7QUFFRCxNQUFNQyxLQUFLLENBQUM7RUFDVkMsV0FBV0EsQ0FBQSxFQUFJO0lBQ2IsSUFBSSxDQUFDQyxTQUFTLEdBQUcsRUFBRTtFQUNyQjtFQUVBQyxZQUFZQSxDQUFFQyxPQUFPLEVBQUU7SUFDckIsS0FBSyxNQUFNQyxHQUFHLElBQUksSUFBSSxDQUFDSCxTQUFTLEVBQUU7TUFDaENFLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDQyxFQUFFLENBQUMsQ0FBQyxHQUFHRCxHQUFHLENBQUNFLElBQUksQ0FBQztJQUM5QjtFQUNGO0FBQ0Y7QUFFQSxLQUFLLE1BQU1ELEVBQUUsSUFBSVAsUUFBUSxFQUFFO0VBQ3pCO0VBQ0FDLEtBQUssQ0FBQ1EsU0FBUyxDQUFDRixFQUFFLENBQUMsR0FBRyxZQUFtQjtJQUFBLFNBQUFHLElBQUEsR0FBQUMsU0FBQSxDQUFBQyxNQUFBLEVBQU5KLElBQUksT0FBQUssS0FBQSxDQUFBSCxJQUFBLEdBQUFJLElBQUEsTUFBQUEsSUFBQSxHQUFBSixJQUFBLEVBQUFJLElBQUE7TUFBSk4sSUFBSSxDQUFBTSxJQUFBLElBQUFILFNBQUEsQ0FBQUcsSUFBQTtJQUFBO0lBQ3JDLElBQUksQ0FBQ1gsU0FBUyxDQUFDWSxJQUFJLENBQUM7TUFBRVIsRUFBRTtNQUFFQztJQUFLLENBQUMsQ0FBQztJQUNqQyxPQUFPLElBQUk7RUFDYixDQUFDO0FBQ0g7QUFHQVEsTUFBTSxDQUFDQyxPQUFPLEdBQUdoQixLQUFLIiwiaWdub3JlTGlzdCI6W119"],"names":[],"mappings":"AAAA;AAEA,MAAM,WAAW;IAAC;IAAO;IAAM;IAAQ;IAAO;IAAS;IAAQ;IAAU;IAAQ;IAAmB;IAAa;IAAS;IAAM;IAAa;IAAW;IAAU;IAAa;IAAS;IAAM;IAAO;IAAO;IAAQ;CAAkB;AACtO,MAAM;IACJ,aAAc;QACZ,IAAI,CAAC,SAAS,GAAG,EAAE;IACrB;IACA,aAAa,OAAO,EAAE;QACpB,KAAK,MAAM,OAAO,IAAI,CAAC,SAAS,CAAE;YAChC,OAAO,CAAC,IAAI,EAAE,CAAC,IAAI,IAAI,IAAI;QAC7B;IACF;AACF;AACA,KAAK,MAAM,MAAM,SAAU;IACzB,mDAAmD;IACnD,MAAM,SAAS,CAAC,GAAG,GAAG;QACpB,IAAK,IAAI,OAAO,UAAU,MAAM,EAAE,OAAO,IAAI,MAAM,OAAO,OAAO,GAAG,OAAO,MAAM,OAAQ;YACvF,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC,KAAK;QAC9B;QACA,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;YAClB;YACA;QACF;QACA,OAAO,IAAI;IACb;AACF;AACA,OAAO,OAAO,GAAG,OACjB,ohFAAohF"}},
    {"offset": {"line": 911, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 915, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/superagent/lib/client.js"],"sourcesContent":["\"use strict\";\n\n/**\n * Root reference for iframes.\n */\n\nlet root;\nif (typeof window !== 'undefined') {\n  // Browser window\n  root = window;\n} else if (typeof self === 'undefined') {\n  // Other environments\n  console.warn('Using browser-only version of superagent in non-browser environment');\n  root = void 0;\n} else {\n  // Web Worker\n  root = self;\n}\nconst Emitter = require('component-emitter');\nconst safeStringify = require('fast-safe-stringify');\nconst qs = require('qs');\nconst RequestBase = require('./request-base');\nconst {\n  isObject,\n  mixin,\n  hasOwn\n} = require('./utils');\nconst ResponseBase = require('./response-base');\nconst Agent = require('./agent-base');\n\n/**\n * Noop.\n */\n\nfunction noop() {}\n\n/**\n * Expose `request`.\n */\n\nmodule.exports = function (method, url) {\n  // callback\n  if (typeof url === 'function') {\n    return new exports.Request('GET', method).end(url);\n  }\n\n  // url first\n  if (arguments.length === 1) {\n    return new exports.Request('GET', method);\n  }\n  return new exports.Request(method, url);\n};\nexports = module.exports;\nconst request = exports;\nexports.Request = Request;\n\n/**\n * Determine XHR.\n */\n\nrequest.getXHR = () => {\n  if (root.XMLHttpRequest) {\n    return new root.XMLHttpRequest();\n  }\n  throw new Error('Browser-only version of superagent could not find XHR');\n};\n\n/**\n * Removes leading and trailing whitespace, added to support IE.\n *\n * @param {String} s\n * @return {String}\n * @api private\n */\n\nconst trim = ''.trim ? s => s.trim() : s => s.replace(/(^\\s*|\\s*$)/g, '');\n\n/**\n * Serialize the given `obj`.\n *\n * @param {Object} obj\n * @return {String}\n * @api private\n */\n\nfunction serialize(object) {\n  if (!isObject(object)) return object;\n  const pairs = [];\n  for (const key in object) {\n    if (hasOwn(object, key)) pushEncodedKeyValuePair(pairs, key, object[key]);\n  }\n  return pairs.join('&');\n}\n\n/**\n * Helps 'serialize' with serializing arrays.\n * Mutates the pairs array.\n *\n * @param {Array} pairs\n * @param {String} key\n * @param {Mixed} val\n */\n\nfunction pushEncodedKeyValuePair(pairs, key, value) {\n  if (value === undefined) return;\n  if (value === null) {\n    pairs.push(encodeURI(key));\n    return;\n  }\n  if (Array.isArray(value)) {\n    for (const v of value) {\n      pushEncodedKeyValuePair(pairs, key, v);\n    }\n  } else if (isObject(value)) {\n    for (const subkey in value) {\n      if (hasOwn(value, subkey)) pushEncodedKeyValuePair(pairs, `${key}[${subkey}]`, value[subkey]);\n    }\n  } else {\n    pairs.push(encodeURI(key) + '=' + encodeURIComponent(value));\n  }\n}\n\n/**\n * Expose serialization method.\n */\n\nrequest.serializeObject = serialize;\n\n/**\n * Parse the given x-www-form-urlencoded `str`.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nfunction parseString(string_) {\n  const object = {};\n  const pairs = string_.split('&');\n  let pair;\n  let pos;\n  for (let i = 0, length_ = pairs.length; i < length_; ++i) {\n    pair = pairs[i];\n    pos = pair.indexOf('=');\n    if (pos === -1) {\n      object[decodeURIComponent(pair)] = '';\n    } else {\n      object[decodeURIComponent(pair.slice(0, pos))] = decodeURIComponent(pair.slice(pos + 1));\n    }\n  }\n  return object;\n}\n\n/**\n * Expose parser.\n */\n\nrequest.parseString = parseString;\n\n/**\n * Default MIME type map.\n *\n *     superagent.types.xml = 'application/xml';\n *\n */\n\nrequest.types = {\n  html: 'text/html',\n  json: 'application/json',\n  xml: 'text/xml',\n  urlencoded: 'application/x-www-form-urlencoded',\n  form: 'application/x-www-form-urlencoded',\n  'form-data': 'application/x-www-form-urlencoded'\n};\n\n/**\n * Default serialization map.\n *\n *     superagent.serialize['application/xml'] = function(obj){\n *       return 'generated xml here';\n *     };\n *\n */\n\nrequest.serialize = {\n  'application/x-www-form-urlencoded': obj => {\n    return qs.stringify(obj, {\n      indices: false,\n      strictNullHandling: true\n    });\n  },\n  'application/json': safeStringify\n};\n\n/**\n * Default parsers.\n *\n *     superagent.parse['application/xml'] = function(str){\n *       return { object parsed from str };\n *     };\n *\n */\n\nrequest.parse = {\n  'application/x-www-form-urlencoded': parseString,\n  'application/json': JSON.parse\n};\n\n/**\n * Parse the given header `str` into\n * an object containing the mapped fields.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nfunction parseHeader(string_) {\n  const lines = string_.split(/\\r?\\n/);\n  const fields = {};\n  let index;\n  let line;\n  let field;\n  let value;\n  for (let i = 0, length_ = lines.length; i < length_; ++i) {\n    line = lines[i];\n    index = line.indexOf(':');\n    if (index === -1) {\n      // could be empty line, just skip it\n      continue;\n    }\n    field = line.slice(0, index).toLowerCase();\n    value = trim(line.slice(index + 1));\n    fields[field] = value;\n  }\n  return fields;\n}\n\n/**\n * Check if `mime` is json or has +json structured syntax suffix.\n *\n * @param {String} mime\n * @return {Boolean}\n * @api private\n */\n\nfunction isJSON(mime) {\n  // should match /json or +json\n  // but not /json-seq\n  return /[/+]json($|[^-\\w])/i.test(mime);\n}\n\n/**\n * Initialize a new `Response` with the given `xhr`.\n *\n *  - set flags (.ok, .error, etc)\n *  - parse header\n *\n * Examples:\n *\n *  Aliasing `superagent` as `request` is nice:\n *\n *      request = superagent;\n *\n *  We can use the promise-like API, or pass callbacks:\n *\n *      request.get('/').end(function(res){});\n *      request.get('/', function(res){});\n *\n *  Sending data can be chained:\n *\n *      request\n *        .post('/user')\n *        .send({ name: 'tj' })\n *        .end(function(res){});\n *\n *  Or passed to `.send()`:\n *\n *      request\n *        .post('/user')\n *        .send({ name: 'tj' }, function(res){});\n *\n *  Or passed to `.post()`:\n *\n *      request\n *        .post('/user', { name: 'tj' })\n *        .end(function(res){});\n *\n * Or further reduced to a single call for simple cases:\n *\n *      request\n *        .post('/user', { name: 'tj' }, function(res){});\n *\n * @param {XMLHTTPRequest} xhr\n * @param {Object} options\n * @api private\n */\n\nfunction Response(request_) {\n  this.req = request_;\n  this.xhr = this.req.xhr;\n  // responseText is accessible only if responseType is '' or 'text' and on older browsers\n  this.text = this.req.method !== 'HEAD' && (this.xhr.responseType === '' || this.xhr.responseType === 'text') || typeof this.xhr.responseType === 'undefined' ? this.xhr.responseText : null;\n  this.statusText = this.req.xhr.statusText;\n  let {\n    status\n  } = this.xhr;\n  // handle IE9 bug: http://stackoverflow.com/questions/10046972/msie-returns-status-code-of-1223-for-ajax-request\n  if (status === 1223) {\n    status = 204;\n  }\n  this._setStatusProperties(status);\n  this.headers = parseHeader(this.xhr.getAllResponseHeaders());\n  this.header = this.headers;\n  // getAllResponseHeaders sometimes falsely returns \"\" for CORS requests, but\n  // getResponseHeader still works. so we get content-type even if getting\n  // other headers fails.\n  this.header['content-type'] = this.xhr.getResponseHeader('content-type');\n  this._setHeaderProperties(this.header);\n  if (this.text === null && request_._responseType) {\n    this.body = this.xhr.response;\n  } else {\n    this.body = this.req.method === 'HEAD' ? null : this._parseBody(this.text ? this.text : this.xhr.response);\n  }\n}\nmixin(Response.prototype, ResponseBase.prototype);\n\n/**\n * Parse the given body `str`.\n *\n * Used for auto-parsing of bodies. Parsers\n * are defined on the `superagent.parse` object.\n *\n * @param {String} str\n * @return {Mixed}\n * @api private\n */\n\nResponse.prototype._parseBody = function (string_) {\n  let parse = request.parse[this.type];\n  if (this.req._parser) {\n    return this.req._parser(this, string_);\n  }\n  if (!parse && isJSON(this.type)) {\n    parse = request.parse['application/json'];\n  }\n  return parse && string_ && (string_.length > 0 || string_ instanceof Object) ? parse(string_) : null;\n};\n\n/**\n * Return an `Error` representative of this response.\n *\n * @return {Error}\n * @api public\n */\n\nResponse.prototype.toError = function () {\n  const {\n    req\n  } = this;\n  const {\n    method\n  } = req;\n  const {\n    url\n  } = req;\n  const message = `cannot ${method} ${url} (${this.status})`;\n  const error = new Error(message);\n  error.status = this.status;\n  error.method = method;\n  error.url = url;\n  return error;\n};\n\n/**\n * Expose `Response`.\n */\n\nrequest.Response = Response;\n\n/**\n * Initialize a new `Request` with the given `method` and `url`.\n *\n * @param {String} method\n * @param {String} url\n * @api public\n */\n\nfunction Request(method, url) {\n  const self = this;\n  this._query = this._query || [];\n  this.method = method;\n  this.url = url;\n  this.header = {}; // preserves header name case\n  this._header = {}; // coerces header names to lowercase\n  this.on('end', () => {\n    let error = null;\n    let res = null;\n    try {\n      res = new Response(self);\n    } catch (err) {\n      error = new Error('Parser is unable to parse the response');\n      error.parse = true;\n      error.original = err;\n      // issue #675: return the raw response if the response parsing fails\n      if (self.xhr) {\n        // ie9 doesn't have 'response' property\n        error.rawResponse = typeof self.xhr.responseType === 'undefined' ? self.xhr.responseText : self.xhr.response;\n        // issue #876: return the http status code if the response parsing fails\n        error.status = self.xhr.status ? self.xhr.status : null;\n        error.statusCode = error.status; // backwards-compat only\n      } else {\n        error.rawResponse = null;\n        error.status = null;\n      }\n      return self.callback(error);\n    }\n    self.emit('response', res);\n    let new_error;\n    try {\n      if (!self._isResponseOK(res)) {\n        new_error = new Error(res.statusText || res.text || 'Unsuccessful HTTP response');\n      }\n    } catch (err) {\n      new_error = err; // ok() callback can throw\n    }\n\n    // #1000 don't catch errors from the callback to avoid double calling it\n    if (new_error) {\n      new_error.original = error;\n      new_error.response = res;\n      new_error.status = new_error.status || res.status;\n      self.callback(new_error, res);\n    } else {\n      self.callback(null, res);\n    }\n  });\n}\n\n/**\n * Mixin `Emitter` and `RequestBase`.\n */\n\n// eslint-disable-next-line new-cap\nEmitter(Request.prototype);\nmixin(Request.prototype, RequestBase.prototype);\n\n/**\n * Set Content-Type to `type`, mapping values from `request.types`.\n *\n * Examples:\n *\n *      superagent.types.xml = 'application/xml';\n *\n *      request.post('/')\n *        .type('xml')\n *        .send(xmlstring)\n *        .end(callback);\n *\n *      request.post('/')\n *        .type('application/xml')\n *        .send(xmlstring)\n *        .end(callback);\n *\n * @param {String} type\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.type = function (type) {\n  this.set('Content-Type', request.types[type] || type);\n  return this;\n};\n\n/**\n * Set Accept to `type`, mapping values from `request.types`.\n *\n * Examples:\n *\n *      superagent.types.json = 'application/json';\n *\n *      request.get('/agent')\n *        .accept('json')\n *        .end(callback);\n *\n *      request.get('/agent')\n *        .accept('application/json')\n *        .end(callback);\n *\n * @param {String} accept\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.accept = function (type) {\n  this.set('Accept', request.types[type] || type);\n  return this;\n};\n\n/**\n * Set Authorization field value with `user` and `pass`.\n *\n * @param {String} user\n * @param {String} [pass] optional in case of using 'bearer' as type\n * @param {Object} options with 'type' property 'auto', 'basic' or 'bearer' (default 'basic')\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.auth = function (user, pass, options) {\n  if (arguments.length === 1) pass = '';\n  if (typeof pass === 'object' && pass !== null) {\n    // pass is optional and can be replaced with options\n    options = pass;\n    pass = '';\n  }\n  if (!options) {\n    options = {\n      type: typeof btoa === 'function' ? 'basic' : 'auto'\n    };\n  }\n  const encoder = options.encoder ? options.encoder : string => {\n    if (typeof btoa === 'function') {\n      return btoa(string);\n    }\n    throw new Error('Cannot use basic auth, btoa is not a function');\n  };\n  return this._auth(user, pass, options, encoder);\n};\n\n/**\n * Add query-string `val`.\n *\n * Examples:\n *\n *   request.get('/shoes')\n *     .query('size=10')\n *     .query({ color: 'blue' })\n *\n * @param {Object|String} val\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.query = function (value) {\n  if (typeof value !== 'string') value = serialize(value);\n  if (value) this._query.push(value);\n  return this;\n};\n\n/**\n * Queue the given `file` as an attachment to the specified `field`,\n * with optional `options` (or filename).\n *\n * ``` js\n * request.post('/upload')\n *   .attach('content', new Blob(['<a id=\"a\"><b id=\"b\">hey!</b></a>'], { type: \"text/html\"}))\n *   .end(callback);\n * ```\n *\n * @param {String} field\n * @param {Blob|File} file\n * @param {String|Object} options\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.attach = function (field, file, options) {\n  if (file) {\n    if (this._data) {\n      throw new Error(\"superagent can't mix .send() and .attach()\");\n    }\n    this._getFormData().append(field, file, options || file.name);\n  }\n  return this;\n};\nRequest.prototype._getFormData = function () {\n  if (!this._formData) {\n    this._formData = new root.FormData();\n  }\n  return this._formData;\n};\n\n/**\n * Invoke the callback with `err` and `res`\n * and handle arity check.\n *\n * @param {Error} err\n * @param {Response} res\n * @api private\n */\n\nRequest.prototype.callback = function (error, res) {\n  if (this._shouldRetry(error, res)) {\n    return this._retry();\n  }\n  const fn = this._callback;\n  this.clearTimeout();\n  if (error) {\n    if (this._maxRetries) error.retries = this._retries - 1;\n    this.emit('error', error);\n  }\n  fn(error, res);\n};\n\n/**\n * Invoke callback with x-domain error.\n *\n * @api private\n */\n\nRequest.prototype.crossDomainError = function () {\n  const error = new Error('Request has been terminated\\nPossible causes: the network is offline, Origin is not allowed by Access-Control-Allow-Origin, the page is being unloaded, etc.');\n  error.crossDomain = true;\n  error.status = this.status;\n  error.method = this.method;\n  error.url = this.url;\n  this.callback(error);\n};\n\n// This only warns, because the request is still likely to work\nRequest.prototype.agent = function () {\n  console.warn('This is not supported in browser version of superagent');\n  return this;\n};\nRequest.prototype.ca = Request.prototype.agent;\nRequest.prototype.buffer = Request.prototype.ca;\n\n// This throws, because it can't send/receive data as expected\nRequest.prototype.write = () => {\n  throw new Error('Streaming is not supported in browser version of superagent');\n};\nRequest.prototype.pipe = Request.prototype.write;\n\n/**\n * Check if `obj` is a host object,\n * we don't want to serialize these :)\n *\n * @param {Object} obj host object\n * @return {Boolean} is a host object\n * @api private\n */\nRequest.prototype._isHost = function (object) {\n  // Native objects stringify to [object File], [object Blob], [object FormData], etc.\n  return object && typeof object === 'object' && !Array.isArray(object) && Object.prototype.toString.call(object) !== '[object Object]';\n};\n\n/**\n * Initiate request, invoking callback `fn(res)`\n * with an instanceof `Response`.\n *\n * @param {Function} fn\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.end = function (fn) {\n  if (this._endCalled) {\n    console.warn('Warning: .end() was called twice. This is not supported in superagent');\n  }\n  this._endCalled = true;\n\n  // store callback\n  this._callback = fn || noop;\n\n  // querystring\n  this._finalizeQueryString();\n  this._end();\n};\nRequest.prototype._setUploadTimeout = function () {\n  const self = this;\n\n  // upload timeout it's wokrs only if deadline timeout is off\n  if (this._uploadTimeout && !this._uploadTimeoutTimer) {\n    this._uploadTimeoutTimer = setTimeout(() => {\n      self._timeoutError('Upload timeout of ', self._uploadTimeout, 'ETIMEDOUT');\n    }, this._uploadTimeout);\n  }\n};\n\n// eslint-disable-next-line complexity\nRequest.prototype._end = function () {\n  if (this._aborted) return this.callback(new Error('The request has been aborted even before .end() was called'));\n  const self = this;\n  this.xhr = request.getXHR();\n  const {\n    xhr\n  } = this;\n  let data = this._formData || this._data;\n  this._setTimeouts();\n\n  // state change\n  xhr.addEventListener('readystatechange', () => {\n    const {\n      readyState\n    } = xhr;\n    if (readyState >= 2 && self._responseTimeoutTimer) {\n      clearTimeout(self._responseTimeoutTimer);\n    }\n    if (readyState !== 4) {\n      return;\n    }\n\n    // In IE9, reads to any property (e.g. status) off of an aborted XHR will\n    // result in the error \"Could not complete the operation due to error c00c023f\"\n    let status;\n    try {\n      status = xhr.status;\n    } catch (err) {\n      status = 0;\n    }\n    if (!status) {\n      if (self.timedout || self._aborted) return;\n      return self.crossDomainError();\n    }\n    self.emit('end');\n  });\n\n  // progress\n  const handleProgress = (direction, e) => {\n    if (e.total > 0) {\n      e.percent = e.loaded / e.total * 100;\n      if (e.percent === 100) {\n        clearTimeout(self._uploadTimeoutTimer);\n      }\n    }\n    e.direction = direction;\n    self.emit('progress', e);\n  };\n  if (this.hasListeners('progress')) {\n    try {\n      xhr.addEventListener('progress', handleProgress.bind(null, 'download'));\n      if (xhr.upload) {\n        xhr.upload.addEventListener('progress', handleProgress.bind(null, 'upload'));\n      }\n    } catch (err) {\n      // Accessing xhr.upload fails in IE from a web worker, so just pretend it doesn't exist.\n      // Reported here:\n      // https://connect.microsoft.com/IE/feedback/details/837245/xmlhttprequest-upload-throws-invalid-argument-when-used-from-web-worker-context\n    }\n  }\n  if (xhr.upload) {\n    this._setUploadTimeout();\n  }\n\n  // initiate request\n  try {\n    if (this.username && this.password) {\n      xhr.open(this.method, this.url, true, this.username, this.password);\n    } else {\n      xhr.open(this.method, this.url, true);\n    }\n  } catch (err) {\n    // see #1149\n    return this.callback(err);\n  }\n\n  // CORS\n  if (this._withCredentials) xhr.withCredentials = true;\n\n  // body\n  if (!this._formData && this.method !== 'GET' && this.method !== 'HEAD' && typeof data !== 'string' && !this._isHost(data)) {\n    // serialize stuff\n    const contentType = this._header['content-type'];\n    let serialize = this._serializer || request.serialize[contentType ? contentType.split(';')[0] : ''];\n    if (!serialize && isJSON(contentType)) {\n      serialize = request.serialize['application/json'];\n    }\n    if (serialize) data = serialize(data);\n  }\n\n  // set header fields\n  for (const field in this.header) {\n    if (this.header[field] === null) continue;\n    if (hasOwn(this.header, field)) xhr.setRequestHeader(field, this.header[field]);\n  }\n  if (this._responseType) {\n    xhr.responseType = this._responseType;\n  }\n\n  // send stuff\n  this.emit('request', this);\n\n  // IE11 xhr.send(undefined) sends 'undefined' string as POST payload (instead of nothing)\n  // We need null here if data is undefined\n  xhr.send(typeof data === 'undefined' ? null : data);\n};\nrequest.agent = () => new Agent();\nfor (const method of ['GET', 'POST', 'OPTIONS', 'PATCH', 'PUT', 'DELETE']) {\n  Agent.prototype[method.toLowerCase()] = function (url, fn) {\n    const request_ = new request.Request(method, url);\n    this._setDefaults(request_);\n    if (fn) {\n      request_.end(fn);\n    }\n    return request_;\n  };\n}\nAgent.prototype.del = Agent.prototype.delete;\n\n/**\n * GET `url` with optional callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} [data] or fn\n * @param {Function} [fn]\n * @return {Request}\n * @api public\n */\n\nrequest.get = (url, data, fn) => {\n  const request_ = request('GET', url);\n  if (typeof data === 'function') {\n    fn = data;\n    data = null;\n  }\n  if (data) request_.query(data);\n  if (fn) request_.end(fn);\n  return request_;\n};\n\n/**\n * HEAD `url` with optional callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} [data] or fn\n * @param {Function} [fn]\n * @return {Request}\n * @api public\n */\n\nrequest.head = (url, data, fn) => {\n  const request_ = request('HEAD', url);\n  if (typeof data === 'function') {\n    fn = data;\n    data = null;\n  }\n  if (data) request_.query(data);\n  if (fn) request_.end(fn);\n  return request_;\n};\n\n/**\n * OPTIONS query to `url` with optional callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} [data] or fn\n * @param {Function} [fn]\n * @return {Request}\n * @api public\n */\n\nrequest.options = (url, data, fn) => {\n  const request_ = request('OPTIONS', url);\n  if (typeof data === 'function') {\n    fn = data;\n    data = null;\n  }\n  if (data) request_.send(data);\n  if (fn) request_.end(fn);\n  return request_;\n};\n\n/**\n * DELETE `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed} [data]\n * @param {Function} [fn]\n * @return {Request}\n * @api public\n */\n\nfunction del(url, data, fn) {\n  const request_ = request('DELETE', url);\n  if (typeof data === 'function') {\n    fn = data;\n    data = null;\n  }\n  if (data) request_.send(data);\n  if (fn) request_.end(fn);\n  return request_;\n}\nrequest.del = del;\nrequest.delete = del;\n\n/**\n * PATCH `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed} [data]\n * @param {Function} [fn]\n * @return {Request}\n * @api public\n */\n\nrequest.patch = (url, data, fn) => {\n  const request_ = request('PATCH', url);\n  if (typeof data === 'function') {\n    fn = data;\n    data = null;\n  }\n  if (data) request_.send(data);\n  if (fn) request_.end(fn);\n  return request_;\n};\n\n/**\n * POST `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed} [data]\n * @param {Function} [fn]\n * @return {Request}\n * @api public\n */\n\nrequest.post = (url, data, fn) => {\n  const request_ = request('POST', url);\n  if (typeof data === 'function') {\n    fn = data;\n    data = null;\n  }\n  if (data) request_.send(data);\n  if (fn) request_.end(fn);\n  return request_;\n};\n\n/**\n * PUT `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} [data] or fn\n * @param {Function} [fn]\n * @return {Request}\n * @api public\n */\n\nrequest.put = (url, data, fn) => {\n  const request_ = request('PUT', url);\n  if (typeof data === 'function') {\n    fn = data;\n    data = null;\n  }\n  if (data) request_.send(data);\n  if (fn) request_.end(fn);\n  return request_;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1726, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}